/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface WithdrawalManagerMockInterface extends utils.Interface {
  functions: {
    "addImmediateWithdrawal(address,address,uint256)": FunctionFragment;
    "addScheduledWithdrawal(address,address,uint256,uint8)": FunctionFragment;
    "cancellableScheduledWithdrawals(address,bool)": FunctionFragment;
    "claimImmediateWithdrawal(address,address)": FunctionFragment;
    "claimScheduledWithdrawals(address,address,uint8)": FunctionFragment;
    "claimScheduledWithdrawalsWasCalled()": FunctionFragment;
    "delay()": FunctionFragment;
    "setCancellableWithdrawals(bool,address,uint256,address,uint256)": FunctionFragment;
    "setClaimScheduledWithdrawals(bool,uint256)": FunctionFragment;
    "setDelay(uint40)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addImmediateWithdrawal"
      | "addScheduledWithdrawal"
      | "cancellableScheduledWithdrawals"
      | "claimImmediateWithdrawal"
      | "claimScheduledWithdrawals"
      | "claimScheduledWithdrawalsWasCalled"
      | "delay"
      | "setCancellableWithdrawals"
      | "setClaimScheduledWithdrawals"
      | "setDelay"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addImmediateWithdrawal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addScheduledWithdrawal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancellableScheduledWithdrawals",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimImmediateWithdrawal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimScheduledWithdrawals",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimScheduledWithdrawalsWasCalled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCancellableWithdrawals",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimScheduledWithdrawals",
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addImmediateWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addScheduledWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancellableScheduledWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimImmediateWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimScheduledWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimScheduledWithdrawalsWasCalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCancellableWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimScheduledWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface WithdrawalManagerMock extends BaseContract {
  contractName: "WithdrawalManagerMock";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WithdrawalManagerMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addImmediateWithdrawal(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addScheduledWithdrawal(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancellableScheduledWithdrawals(
      arg0: PromiseOrValue<string>,
      isForceCancel: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        token1: string;
        amount1: BigNumber;
        token2: string;
        amount2: BigNumber;
      }
    >;

    claimImmediateWithdrawal(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimScheduledWithdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimScheduledWithdrawalsWasCalled(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    delay(overrides?: CallOverrides): Promise<[number]>;

    setCancellableWithdrawals(
      isForceCancel: PromiseOrValue<boolean>,
      token1: PromiseOrValue<string>,
      amount1: PromiseOrValue<BigNumberish>,
      token2: PromiseOrValue<string>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimScheduledWithdrawals(
      hasScheduled: PromiseOrValue<boolean>,
      tokensToEnable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addImmediateWithdrawal(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addScheduledWithdrawal(
    creditAccount: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    tokenIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancellableScheduledWithdrawals(
    arg0: PromiseOrValue<string>,
    isForceCancel: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber] & {
      token1: string;
      amount1: BigNumber;
      token2: string;
      amount2: BigNumber;
    }
  >;

  claimImmediateWithdrawal(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimScheduledWithdrawals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimScheduledWithdrawalsWasCalled(
    overrides?: CallOverrides
  ): Promise<boolean>;

  delay(overrides?: CallOverrides): Promise<number>;

  setCancellableWithdrawals(
    isForceCancel: PromiseOrValue<boolean>,
    token1: PromiseOrValue<string>,
    amount1: PromiseOrValue<BigNumberish>,
    token2: PromiseOrValue<string>,
    amount2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimScheduledWithdrawals(
    hasScheduled: PromiseOrValue<boolean>,
    tokensToEnable: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelay(
    _delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addImmediateWithdrawal(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addScheduledWithdrawal(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancellableScheduledWithdrawals(
      arg0: PromiseOrValue<string>,
      isForceCancel: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        token1: string;
        amount1: BigNumber;
        token2: string;
        amount2: BigNumber;
      }
    >;

    claimImmediateWithdrawal(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimScheduledWithdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        hasScheduled: boolean;
        tokensToEnable: BigNumber;
      }
    >;

    claimScheduledWithdrawalsWasCalled(
      overrides?: CallOverrides
    ): Promise<boolean>;

    delay(overrides?: CallOverrides): Promise<number>;

    setCancellableWithdrawals(
      isForceCancel: PromiseOrValue<boolean>,
      token1: PromiseOrValue<string>,
      amount1: PromiseOrValue<BigNumberish>,
      token2: PromiseOrValue<string>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimScheduledWithdrawals(
      hasScheduled: PromiseOrValue<boolean>,
      tokensToEnable: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addImmediateWithdrawal(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addScheduledWithdrawal(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancellableScheduledWithdrawals(
      arg0: PromiseOrValue<string>,
      isForceCancel: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimImmediateWithdrawal(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimScheduledWithdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimScheduledWithdrawalsWasCalled(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    setCancellableWithdrawals(
      isForceCancel: PromiseOrValue<boolean>,
      token1: PromiseOrValue<string>,
      amount1: PromiseOrValue<BigNumberish>,
      token2: PromiseOrValue<string>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimScheduledWithdrawals(
      hasScheduled: PromiseOrValue<boolean>,
      tokensToEnable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addImmediateWithdrawal(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addScheduledWithdrawal(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancellableScheduledWithdrawals(
      arg0: PromiseOrValue<string>,
      isForceCancel: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimImmediateWithdrawal(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimScheduledWithdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimScheduledWithdrawalsWasCalled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCancellableWithdrawals(
      isForceCancel: PromiseOrValue<boolean>,
      token1: PromiseOrValue<string>,
      amount1: PromiseOrValue<BigNumberish>,
      token2: PromiseOrValue<string>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimScheduledWithdrawals(
      hasScheduled: PromiseOrValue<boolean>,
      tokensToEnable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
