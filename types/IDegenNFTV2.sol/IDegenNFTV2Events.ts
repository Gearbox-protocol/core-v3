/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IDegenNFTV2EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "NewCreditFacadeAdded(address)": EventFragment;
    "NewCreditFacadeRemoved(address)": EventFragment;
    "NewMinterSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewCreditFacadeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCreditFacadeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMinterSet"): EventFragment;
}

export interface NewCreditFacadeAddedEventObject {
  arg0: string;
}
export type NewCreditFacadeAddedEvent = TypedEvent<
  [string],
  NewCreditFacadeAddedEventObject
>;

export type NewCreditFacadeAddedEventFilter =
  TypedEventFilter<NewCreditFacadeAddedEvent>;

export interface NewCreditFacadeRemovedEventObject {
  arg0: string;
}
export type NewCreditFacadeRemovedEvent = TypedEvent<
  [string],
  NewCreditFacadeRemovedEventObject
>;

export type NewCreditFacadeRemovedEventFilter =
  TypedEventFilter<NewCreditFacadeRemovedEvent>;

export interface NewMinterSetEventObject {
  arg0: string;
}
export type NewMinterSetEvent = TypedEvent<[string], NewMinterSetEventObject>;

export type NewMinterSetEventFilter = TypedEventFilter<NewMinterSetEvent>;

export interface IDegenNFTV2Events extends BaseContract {
  contractName: "IDegenNFTV2Events";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDegenNFTV2EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "NewCreditFacadeAdded(address)"(
      arg0?: PromiseOrValue<string> | null
    ): NewCreditFacadeAddedEventFilter;
    NewCreditFacadeAdded(
      arg0?: PromiseOrValue<string> | null
    ): NewCreditFacadeAddedEventFilter;

    "NewCreditFacadeRemoved(address)"(
      arg0?: PromiseOrValue<string> | null
    ): NewCreditFacadeRemovedEventFilter;
    NewCreditFacadeRemoved(
      arg0?: PromiseOrValue<string> | null
    ): NewCreditFacadeRemovedEventFilter;

    "NewMinterSet(address)"(
      arg0?: PromiseOrValue<string> | null
    ): NewMinterSetEventFilter;
    NewMinterSet(arg0?: PromiseOrValue<string> | null): NewMinterSetEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
