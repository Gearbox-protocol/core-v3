/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IPoolBaseInterface extends utils.Interface {
  functions: {
    "addressProvider()": FunctionFragment;
    "calcLinearCumulative_RAY()": FunctionFragment;
    "lendCreditAccount(uint256,address)": FunctionFragment;
    "repayCreditAccount(uint256,uint256,uint256)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressProvider"
      | "calcLinearCumulative_RAY"
      | "lendCreditAccount"
      | "repayCreditAccount"
      | "underlyingToken"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcLinearCumulative_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendCreditAccount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditAccount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcLinearCumulative_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface IPoolBase extends BaseContract {
  contractName: "IPoolBase";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayCreditAccount(
      repaidAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addressProvider(overrides?: CallOverrides): Promise<string>;

  calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<BigNumber>;

  lendCreditAccount(
    borrowedAmount: PromiseOrValue<BigNumberish>,
    creditAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayCreditAccount(
    repaidAmount: PromiseOrValue<BigNumberish>,
    profit: PromiseOrValue<BigNumberish>,
    loss: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addressProvider(overrides?: CallOverrides): Promise<string>;

    calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayCreditAccount(
      repaidAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayCreditAccount(
      repaidAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcLinearCumulative_RAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayCreditAccount(
      repaidAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
