/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IWithdrawalManagerV3EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AddCreditManager(address)": EventFragment;
    "AddImmediateWithdrawal(address,address,uint256)": EventFragment;
    "AddScheduledWithdrawal(address,address,uint256,uint40)": EventFragment;
    "CancelScheduledWithdrawal(address,address,uint256)": EventFragment;
    "ClaimImmediateWithdrawal(address,address,address,uint256)": EventFragment;
    "ClaimScheduledWithdrawal(address,address,address,uint256)": EventFragment;
    "SetWithdrawalDelay(uint40)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCreditManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddImmediateWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddScheduledWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelScheduledWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimImmediateWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimScheduledWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWithdrawalDelay"): EventFragment;
}

export interface AddCreditManagerEventObject {
  creditManager: string;
}
export type AddCreditManagerEvent = TypedEvent<
  [string],
  AddCreditManagerEventObject
>;

export type AddCreditManagerEventFilter =
  TypedEventFilter<AddCreditManagerEvent>;

export interface AddImmediateWithdrawalEventObject {
  account: string;
  token: string;
  amount: BigNumber;
}
export type AddImmediateWithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  AddImmediateWithdrawalEventObject
>;

export type AddImmediateWithdrawalEventFilter =
  TypedEventFilter<AddImmediateWithdrawalEvent>;

export interface AddScheduledWithdrawalEventObject {
  creditAccount: string;
  token: string;
  amount: BigNumber;
  maturity: number;
}
export type AddScheduledWithdrawalEvent = TypedEvent<
  [string, string, BigNumber, number],
  AddScheduledWithdrawalEventObject
>;

export type AddScheduledWithdrawalEventFilter =
  TypedEventFilter<AddScheduledWithdrawalEvent>;

export interface CancelScheduledWithdrawalEventObject {
  creditAccount: string;
  token: string;
  amount: BigNumber;
}
export type CancelScheduledWithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  CancelScheduledWithdrawalEventObject
>;

export type CancelScheduledWithdrawalEventFilter =
  TypedEventFilter<CancelScheduledWithdrawalEvent>;

export interface ClaimImmediateWithdrawalEventObject {
  account: string;
  token: string;
  to: string;
  amount: BigNumber;
}
export type ClaimImmediateWithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber],
  ClaimImmediateWithdrawalEventObject
>;

export type ClaimImmediateWithdrawalEventFilter =
  TypedEventFilter<ClaimImmediateWithdrawalEvent>;

export interface ClaimScheduledWithdrawalEventObject {
  creditAccount: string;
  token: string;
  to: string;
  amount: BigNumber;
}
export type ClaimScheduledWithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber],
  ClaimScheduledWithdrawalEventObject
>;

export type ClaimScheduledWithdrawalEventFilter =
  TypedEventFilter<ClaimScheduledWithdrawalEvent>;

export interface SetWithdrawalDelayEventObject {
  newDelay: number;
}
export type SetWithdrawalDelayEvent = TypedEvent<
  [number],
  SetWithdrawalDelayEventObject
>;

export type SetWithdrawalDelayEventFilter =
  TypedEventFilter<SetWithdrawalDelayEvent>;

export interface IWithdrawalManagerV3Events extends BaseContract {
  contractName: "IWithdrawalManagerV3Events";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWithdrawalManagerV3EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AddCreditManager(address)"(
      creditManager?: PromiseOrValue<string> | null
    ): AddCreditManagerEventFilter;
    AddCreditManager(
      creditManager?: PromiseOrValue<string> | null
    ): AddCreditManagerEventFilter;

    "AddImmediateWithdrawal(address,address,uint256)"(
      account?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): AddImmediateWithdrawalEventFilter;
    AddImmediateWithdrawal(
      account?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): AddImmediateWithdrawalEventFilter;

    "AddScheduledWithdrawal(address,address,uint256,uint40)"(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      maturity?: null
    ): AddScheduledWithdrawalEventFilter;
    AddScheduledWithdrawal(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      maturity?: null
    ): AddScheduledWithdrawalEventFilter;

    "CancelScheduledWithdrawal(address,address,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): CancelScheduledWithdrawalEventFilter;
    CancelScheduledWithdrawal(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): CancelScheduledWithdrawalEventFilter;

    "ClaimImmediateWithdrawal(address,address,address,uint256)"(
      account?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      to?: null,
      amount?: null
    ): ClaimImmediateWithdrawalEventFilter;
    ClaimImmediateWithdrawal(
      account?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      to?: null,
      amount?: null
    ): ClaimImmediateWithdrawalEventFilter;

    "ClaimScheduledWithdrawal(address,address,address,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      to?: null,
      amount?: null
    ): ClaimScheduledWithdrawalEventFilter;
    ClaimScheduledWithdrawal(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      to?: null,
      amount?: null
    ): ClaimScheduledWithdrawalEventFilter;

    "SetWithdrawalDelay(uint40)"(
      newDelay?: null
    ): SetWithdrawalDelayEventFilter;
    SetWithdrawalDelay(newDelay?: null): SetWithdrawalDelayEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
