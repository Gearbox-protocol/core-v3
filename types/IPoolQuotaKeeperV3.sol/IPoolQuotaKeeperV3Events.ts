/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IPoolQuotaKeeperV3EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AddCreditManager(address)": EventFragment;
    "AddQuotaToken(address)": EventFragment;
    "SetGauge(address)": EventFragment;
    "SetQuotaIncreaseFee(address,uint16)": EventFragment;
    "SetTokenLimit(address,uint96)": EventFragment;
    "UpdateQuota(address,address,int96)": EventFragment;
    "UpdateTokenQuotaRate(address,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCreditManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddQuotaToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGauge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetQuotaIncreaseFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateQuota"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTokenQuotaRate"): EventFragment;
}

export interface AddCreditManagerEventObject {
  creditManager: string;
}
export type AddCreditManagerEvent = TypedEvent<
  [string],
  AddCreditManagerEventObject
>;

export type AddCreditManagerEventFilter =
  TypedEventFilter<AddCreditManagerEvent>;

export interface AddQuotaTokenEventObject {
  token: string;
}
export type AddQuotaTokenEvent = TypedEvent<[string], AddQuotaTokenEventObject>;

export type AddQuotaTokenEventFilter = TypedEventFilter<AddQuotaTokenEvent>;

export interface SetGaugeEventObject {
  newGauge: string;
}
export type SetGaugeEvent = TypedEvent<[string], SetGaugeEventObject>;

export type SetGaugeEventFilter = TypedEventFilter<SetGaugeEvent>;

export interface SetQuotaIncreaseFeeEventObject {
  token: string;
  fee: number;
}
export type SetQuotaIncreaseFeeEvent = TypedEvent<
  [string, number],
  SetQuotaIncreaseFeeEventObject
>;

export type SetQuotaIncreaseFeeEventFilter =
  TypedEventFilter<SetQuotaIncreaseFeeEvent>;

export interface SetTokenLimitEventObject {
  token: string;
  limit: BigNumber;
}
export type SetTokenLimitEvent = TypedEvent<
  [string, BigNumber],
  SetTokenLimitEventObject
>;

export type SetTokenLimitEventFilter = TypedEventFilter<SetTokenLimitEvent>;

export interface UpdateQuotaEventObject {
  creditAccount: string;
  token: string;
  quotaChange: BigNumber;
}
export type UpdateQuotaEvent = TypedEvent<
  [string, string, BigNumber],
  UpdateQuotaEventObject
>;

export type UpdateQuotaEventFilter = TypedEventFilter<UpdateQuotaEvent>;

export interface UpdateTokenQuotaRateEventObject {
  token: string;
  rate: number;
}
export type UpdateTokenQuotaRateEvent = TypedEvent<
  [string, number],
  UpdateTokenQuotaRateEventObject
>;

export type UpdateTokenQuotaRateEventFilter =
  TypedEventFilter<UpdateTokenQuotaRateEvent>;

export interface IPoolQuotaKeeperV3Events extends BaseContract {
  contractName: "IPoolQuotaKeeperV3Events";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolQuotaKeeperV3EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AddCreditManager(address)"(
      creditManager?: PromiseOrValue<string> | null
    ): AddCreditManagerEventFilter;
    AddCreditManager(
      creditManager?: PromiseOrValue<string> | null
    ): AddCreditManagerEventFilter;

    "AddQuotaToken(address)"(
      token?: PromiseOrValue<string> | null
    ): AddQuotaTokenEventFilter;
    AddQuotaToken(
      token?: PromiseOrValue<string> | null
    ): AddQuotaTokenEventFilter;

    "SetGauge(address)"(
      newGauge?: PromiseOrValue<string> | null
    ): SetGaugeEventFilter;
    SetGauge(newGauge?: PromiseOrValue<string> | null): SetGaugeEventFilter;

    "SetQuotaIncreaseFee(address,uint16)"(
      token?: PromiseOrValue<string> | null,
      fee?: null
    ): SetQuotaIncreaseFeeEventFilter;
    SetQuotaIncreaseFee(
      token?: PromiseOrValue<string> | null,
      fee?: null
    ): SetQuotaIncreaseFeeEventFilter;

    "SetTokenLimit(address,uint96)"(
      token?: PromiseOrValue<string> | null,
      limit?: null
    ): SetTokenLimitEventFilter;
    SetTokenLimit(
      token?: PromiseOrValue<string> | null,
      limit?: null
    ): SetTokenLimitEventFilter;

    "UpdateQuota(address,address,int96)"(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      quotaChange?: null
    ): UpdateQuotaEventFilter;
    UpdateQuota(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      quotaChange?: null
    ): UpdateQuotaEventFilter;

    "UpdateTokenQuotaRate(address,uint16)"(
      token?: PromiseOrValue<string> | null,
      rate?: null
    ): UpdateTokenQuotaRateEventFilter;
    UpdateTokenQuotaRate(
      token?: PromiseOrValue<string> | null,
      rate?: null
    ): UpdateTokenQuotaRateEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
