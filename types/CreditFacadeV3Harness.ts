/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type MultiCallStruct = {
  target: PromiseOrValue<string>;
  callData: PromiseOrValue<BytesLike>;
};

export type MultiCallStructOutput = [string, string] & {
  target: string;
  callData: string;
};

export type FullCheckParamsStruct = {
  collateralHints: PromiseOrValue<BigNumberish>[];
  minHealthFactor: PromiseOrValue<BigNumberish>;
  enabledTokensMaskAfter: PromiseOrValue<BigNumberish>;
};

export type FullCheckParamsStructOutput = [BigNumber[], number, BigNumber] & {
  collateralHints: BigNumber[];
  minHealthFactor: number;
  enabledTokensMaskAfter: BigNumber;
};

export interface CreditFacadeV3HarnessInterface extends utils.Interface {
  functions: {
    "acl()": FunctionFragment;
    "botList()": FunctionFragment;
    "botMulticall(address,(address,bytes)[])": FunctionFragment;
    "canLiquidateWhilePaused(address)": FunctionFragment;
    "claimWithdrawals(address,address)": FunctionFragment;
    "closeCreditAccount(address,address,uint256,bool,(address,bytes)[])": FunctionFragment;
    "controller()": FunctionFragment;
    "creditManager()": FunctionFragment;
    "debtLimits()": FunctionFragment;
    "degenNFT()": FunctionFragment;
    "eraseAllBotPermissionsAtClosure(address)": FunctionFragment;
    "expirable()": FunctionFragment;
    "expirationDate()": FunctionFragment;
    "forbiddenTokenMask()": FunctionFragment;
    "isExpired()": FunctionFragment;
    "lastBlockBorrowedInt()": FunctionFragment;
    "liquidateCreditAccount(address,address,uint256,bool,(address,bytes)[])": FunctionFragment;
    "lossParams()": FunctionFragment;
    "maxApprovedBots()": FunctionFragment;
    "maxDebtPerBlockMultiplier()": FunctionFragment;
    "maxQuotaMultiplier()": FunctionFragment;
    "multicall(address,(address,bytes)[])": FunctionFragment;
    "multicallInt(address,(address,bytes)[],uint256,uint256)": FunctionFragment;
    "openCreditAccount(uint256,address,(address,bytes)[],uint16)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "revertIfNoPermission(uint256,uint256)": FunctionFragment;
    "revertIfOutOfBorrowingLimit(uint256)": FunctionFragment;
    "revertIfOutOfDebtLimits(uint256)": FunctionFragment;
    "revertIfOutOfTotalDebtLimit(uint256,uint8)": FunctionFragment;
    "setBotList(address)": FunctionFragment;
    "setBotPermissions(address,address,uint192,uint72,uint72)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setCumulativeLoss(uint128)": FunctionFragment;
    "setCumulativeLossParams(uint128,bool)": FunctionFragment;
    "setCurrentCumulativeLoss(uint128)": FunctionFragment;
    "setDebtLimits(uint128,uint128,uint8)": FunctionFragment;
    "setEmergencyLiquidator(address,uint8)": FunctionFragment;
    "setExpirationDate(uint40)": FunctionFragment;
    "setLastBlockBorrowed(uint64)": FunctionFragment;
    "setReentrancy(uint8)": FunctionFragment;
    "setTokenAllowance(address,uint8)": FunctionFragment;
    "setTotalBorrowedInBlock(uint128)": FunctionFragment;
    "setTotalDebtParams(uint128,uint128)": FunctionFragment;
    "totalBorrowedInBlockInt()": FunctionFragment;
    "totalDebt()": FunctionFragment;
    "trackTotalDebt()": FunctionFragment;
    "unpause()": FunctionFragment;
    "version()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawalManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acl"
      | "botList"
      | "botMulticall"
      | "canLiquidateWhilePaused"
      | "claimWithdrawals"
      | "closeCreditAccount"
      | "controller"
      | "creditManager"
      | "debtLimits"
      | "degenNFT"
      | "eraseAllBotPermissionsAtClosure"
      | "expirable"
      | "expirationDate"
      | "forbiddenTokenMask"
      | "isExpired"
      | "lastBlockBorrowedInt"
      | "liquidateCreditAccount"
      | "lossParams"
      | "maxApprovedBots"
      | "maxDebtPerBlockMultiplier"
      | "maxQuotaMultiplier"
      | "multicall"
      | "multicallInt"
      | "openCreditAccount"
      | "pause"
      | "paused"
      | "revertIfNoPermission"
      | "revertIfOutOfBorrowingLimit"
      | "revertIfOutOfDebtLimits"
      | "revertIfOutOfTotalDebtLimit"
      | "setBotList"
      | "setBotPermissions"
      | "setController"
      | "setCumulativeLoss"
      | "setCumulativeLossParams"
      | "setCurrentCumulativeLoss"
      | "setDebtLimits"
      | "setEmergencyLiquidator"
      | "setExpirationDate"
      | "setLastBlockBorrowed"
      | "setReentrancy"
      | "setTokenAllowance"
      | "setTotalBorrowedInBlock"
      | "setTotalDebtParams"
      | "totalBorrowedInBlockInt"
      | "totalDebt"
      | "trackTotalDebt"
      | "unpause"
      | "version"
      | "weth"
      | "withdrawalManager"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(functionFragment: "botList", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "botMulticall",
    values: [PromiseOrValue<string>, MultiCallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canLiquidateWhilePaused",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawals",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeCreditAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      MultiCallStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtLimits",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "degenNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eraseAllBotPermissionsAtClosure",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "expirable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expirationDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forbiddenTokenMask",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isExpired", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastBlockBorrowedInt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCreditAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      MultiCallStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lossParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxApprovedBots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDebtPerBlockMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxQuotaMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<string>, MultiCallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicallInt",
    values: [
      PromiseOrValue<string>,
      MultiCallStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openCreditAccount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      MultiCallStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revertIfNoPermission",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfOutOfBorrowingLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfOutOfDebtLimits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfOutOfTotalDebtLimit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotPermissions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCumulativeLoss",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCumulativeLossParams",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentCumulativeLoss",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtLimits",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyLiquidator",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpirationDate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastBlockBorrowed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReentrancy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalBorrowedInBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalDebtParams",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowedInBlockInt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trackTotalDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawalManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "botList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "botMulticall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canLiquidateWhilePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtLimits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "degenNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eraseAllBotPermissionsAtClosure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expirable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbiddenTokenMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBlockBorrowedInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lossParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxApprovedBots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtPerBlockMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxQuotaMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multicallInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revertIfNoPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfOutOfBorrowingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfOutOfDebtLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfOutOfTotalDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBotList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBotPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCumulativeLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCumulativeLossParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentCumulativeLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastBlockBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReentrancy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalBorrowedInBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalDebtParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowedInBlockInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trackTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalManager",
    data: BytesLike
  ): Result;

  events: {
    "AddCollateral(address,address,uint256)": EventFragment;
    "CloseCreditAccount(address,address,address)": EventFragment;
    "DecreaseDebt(address,uint256)": EventFragment;
    "Execute(address,address)": EventFragment;
    "FinishMultiCall()": EventFragment;
    "IncreaseDebt(address,uint256)": EventFragment;
    "LiquidateCreditAccount(address,address,address,address,uint8,uint256)": EventFragment;
    "NewController(address)": EventFragment;
    "OpenCreditAccount(address,address,address,uint256,uint16)": EventFragment;
    "Paused(address)": EventFragment;
    "SetEnabledTokensMask(address,uint256)": EventFragment;
    "StartMultiCall(address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinishMultiCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEnabledTokensMask"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartMultiCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AddCollateralEventObject {
  creditAccount: string;
  token: string;
  value: BigNumber;
}
export type AddCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  AddCollateralEventObject
>;

export type AddCollateralEventFilter = TypedEventFilter<AddCollateralEvent>;

export interface CloseCreditAccountEventObject {
  creditAccount: string;
  borrower: string;
  to: string;
}
export type CloseCreditAccountEvent = TypedEvent<
  [string, string, string],
  CloseCreditAccountEventObject
>;

export type CloseCreditAccountEventFilter =
  TypedEventFilter<CloseCreditAccountEvent>;

export interface DecreaseDebtEventObject {
  creditAccount: string;
  amount: BigNumber;
}
export type DecreaseDebtEvent = TypedEvent<
  [string, BigNumber],
  DecreaseDebtEventObject
>;

export type DecreaseDebtEventFilter = TypedEventFilter<DecreaseDebtEvent>;

export interface ExecuteEventObject {
  creditAccount: string;
  targetContract: string;
}
export type ExecuteEvent = TypedEvent<[string, string], ExecuteEventObject>;

export type ExecuteEventFilter = TypedEventFilter<ExecuteEvent>;

export interface FinishMultiCallEventObject {}
export type FinishMultiCallEvent = TypedEvent<[], FinishMultiCallEventObject>;

export type FinishMultiCallEventFilter = TypedEventFilter<FinishMultiCallEvent>;

export interface IncreaseDebtEventObject {
  creditAccount: string;
  amount: BigNumber;
}
export type IncreaseDebtEvent = TypedEvent<
  [string, BigNumber],
  IncreaseDebtEventObject
>;

export type IncreaseDebtEventFilter = TypedEventFilter<IncreaseDebtEvent>;

export interface LiquidateCreditAccountEventObject {
  creditAccount: string;
  borrower: string;
  liquidator: string;
  to: string;
  closureAction: number;
  remainingFunds: BigNumber;
}
export type LiquidateCreditAccountEvent = TypedEvent<
  [string, string, string, string, number, BigNumber],
  LiquidateCreditAccountEventObject
>;

export type LiquidateCreditAccountEventFilter =
  TypedEventFilter<LiquidateCreditAccountEvent>;

export interface NewControllerEventObject {
  newController: string;
}
export type NewControllerEvent = TypedEvent<[string], NewControllerEventObject>;

export type NewControllerEventFilter = TypedEventFilter<NewControllerEvent>;

export interface OpenCreditAccountEventObject {
  creditAccount: string;
  onBehalfOf: string;
  caller: string;
  debt: BigNumber;
  referralCode: number;
}
export type OpenCreditAccountEvent = TypedEvent<
  [string, string, string, BigNumber, number],
  OpenCreditAccountEventObject
>;

export type OpenCreditAccountEventFilter =
  TypedEventFilter<OpenCreditAccountEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SetEnabledTokensMaskEventObject {
  creditAccount: string;
  enabledTokensMask: BigNumber;
}
export type SetEnabledTokensMaskEvent = TypedEvent<
  [string, BigNumber],
  SetEnabledTokensMaskEventObject
>;

export type SetEnabledTokensMaskEventFilter =
  TypedEventFilter<SetEnabledTokensMaskEvent>;

export interface StartMultiCallEventObject {
  creditAccount: string;
  caller: string;
}
export type StartMultiCallEvent = TypedEvent<
  [string, string],
  StartMultiCallEventObject
>;

export type StartMultiCallEventFilter = TypedEventFilter<StartMultiCallEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface CreditFacadeV3Harness extends BaseContract {
  contractName: "CreditFacadeV3Harness";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditFacadeV3HarnessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acl(overrides?: CallOverrides): Promise<[string]>;

    botList(overrides?: CallOverrides): Promise<[string]>;

    botMulticall(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canLiquidateWhilePaused(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimWithdrawals(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeCreditAccount(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skipTokenMask: PromiseOrValue<BigNumberish>,
      convertToETH: PromiseOrValue<boolean>,
      calls: MultiCallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    creditManager(overrides?: CallOverrides): Promise<[string]>;

    debtLimits(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { minDebt: BigNumber; maxDebt: BigNumber }
    >;

    degenNFT(overrides?: CallOverrides): Promise<[string]>;

    eraseAllBotPermissionsAtClosure(
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expirable(overrides?: CallOverrides): Promise<[boolean]>;

    expirationDate(overrides?: CallOverrides): Promise<[number]>;

    forbiddenTokenMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    isExpired(overrides?: CallOverrides): Promise<[boolean]>;

    lastBlockBorrowedInt(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidateCreditAccount(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skipTokenMask: PromiseOrValue<BigNumberish>,
      convertToETH: PromiseOrValue<boolean>,
      calls: MultiCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lossParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentCumulativeLoss: BigNumber;
        maxCumulativeLoss: BigNumber;
      }
    >;

    maxApprovedBots(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDebtPerBlockMultiplier(overrides?: CallOverrides): Promise<[number]>;

    maxQuotaMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    multicall(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicallInt(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      enabledTokensMask: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openCreditAccount(
      debt: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    revertIfNoPermission(
      flags: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    revertIfOutOfBorrowingLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revertIfOutOfDebtLimits(
      debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    revertIfOutOfTotalDebtLimit(
      delta: PromiseOrValue<BigNumberish>,
      action: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBotList(
      _botList: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBotPermissions(
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      fundingAmount: PromiseOrValue<BigNumberish>,
      weeklyFundingAllowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCumulativeLoss(
      newLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCumulativeLossParams(
      _maxCumulativeLoss: PromiseOrValue<BigNumberish>,
      resetCumulativeLoss: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCurrentCumulativeLoss(
      _currentCumulativeLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDebtLimits(
      _minDebt: PromiseOrValue<BigNumberish>,
      _maxDebt: PromiseOrValue<BigNumberish>,
      _maxDebtPerBlockMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEmergencyLiquidator(
      liquidator: PromiseOrValue<string>,
      allowanceAction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExpirationDate(
      newExpirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLastBlockBorrowed(
      _lastBlockBorrowed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReentrancy(
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenAllowance(
      token: PromiseOrValue<string>,
      allowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTotalBorrowedInBlock(
      _totalBorrowedInBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTotalDebtParams(
      newCurrentTotalDebt: PromiseOrValue<BigNumberish>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalBorrowedInBlockInt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebt(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentTotalDebt: BigNumber;
        totalDebtLimit: BigNumber;
      }
    >;

    trackTotalDebt(overrides?: CallOverrides): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawalManager(overrides?: CallOverrides): Promise<[string]>;
  };

  acl(overrides?: CallOverrides): Promise<string>;

  botList(overrides?: CallOverrides): Promise<string>;

  botMulticall(
    creditAccount: PromiseOrValue<string>,
    calls: MultiCallStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canLiquidateWhilePaused(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimWithdrawals(
    creditAccount: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeCreditAccount(
    creditAccount: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    skipTokenMask: PromiseOrValue<BigNumberish>,
    convertToETH: PromiseOrValue<boolean>,
    calls: MultiCallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  creditManager(overrides?: CallOverrides): Promise<string>;

  debtLimits(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { minDebt: BigNumber; maxDebt: BigNumber }
  >;

  degenNFT(overrides?: CallOverrides): Promise<string>;

  eraseAllBotPermissionsAtClosure(
    creditAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expirable(overrides?: CallOverrides): Promise<boolean>;

  expirationDate(overrides?: CallOverrides): Promise<number>;

  forbiddenTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

  isExpired(overrides?: CallOverrides): Promise<boolean>;

  lastBlockBorrowedInt(overrides?: CallOverrides): Promise<BigNumber>;

  liquidateCreditAccount(
    creditAccount: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    skipTokenMask: PromiseOrValue<BigNumberish>,
    convertToETH: PromiseOrValue<boolean>,
    calls: MultiCallStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lossParams(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      currentCumulativeLoss: BigNumber;
      maxCumulativeLoss: BigNumber;
    }
  >;

  maxApprovedBots(overrides?: CallOverrides): Promise<BigNumber>;

  maxDebtPerBlockMultiplier(overrides?: CallOverrides): Promise<number>;

  maxQuotaMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    creditAccount: PromiseOrValue<string>,
    calls: MultiCallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicallInt(
    creditAccount: PromiseOrValue<string>,
    calls: MultiCallStruct[],
    enabledTokensMask: PromiseOrValue<BigNumberish>,
    flags: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openCreditAccount(
    debt: PromiseOrValue<BigNumberish>,
    onBehalfOf: PromiseOrValue<string>,
    calls: MultiCallStruct[],
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  revertIfNoPermission(
    flags: PromiseOrValue<BigNumberish>,
    permission: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  revertIfOutOfBorrowingLimit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revertIfOutOfDebtLimits(
    debt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  revertIfOutOfTotalDebtLimit(
    delta: PromiseOrValue<BigNumberish>,
    action: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBotList(
    _botList: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBotPermissions(
    creditAccount: PromiseOrValue<string>,
    bot: PromiseOrValue<string>,
    permissions: PromiseOrValue<BigNumberish>,
    fundingAmount: PromiseOrValue<BigNumberish>,
    weeklyFundingAllowance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    newController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCumulativeLoss(
    newLoss: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCumulativeLossParams(
    _maxCumulativeLoss: PromiseOrValue<BigNumberish>,
    resetCumulativeLoss: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCurrentCumulativeLoss(
    _currentCumulativeLoss: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDebtLimits(
    _minDebt: PromiseOrValue<BigNumberish>,
    _maxDebt: PromiseOrValue<BigNumberish>,
    _maxDebtPerBlockMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEmergencyLiquidator(
    liquidator: PromiseOrValue<string>,
    allowanceAction: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExpirationDate(
    newExpirationDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLastBlockBorrowed(
    _lastBlockBorrowed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReentrancy(
    _status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenAllowance(
    token: PromiseOrValue<string>,
    allowance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTotalBorrowedInBlock(
    _totalBorrowedInBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTotalDebtParams(
    newCurrentTotalDebt: PromiseOrValue<BigNumberish>,
    newLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalBorrowedInBlockInt(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebt(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      currentTotalDebt: BigNumber;
      totalDebtLimit: BigNumber;
    }
  >;

  trackTotalDebt(overrides?: CallOverrides): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawalManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acl(overrides?: CallOverrides): Promise<string>;

    botList(overrides?: CallOverrides): Promise<string>;

    botMulticall(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    canLiquidateWhilePaused(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimWithdrawals(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeCreditAccount(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skipTokenMask: PromiseOrValue<BigNumberish>,
      convertToETH: PromiseOrValue<boolean>,
      calls: MultiCallStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    creditManager(overrides?: CallOverrides): Promise<string>;

    debtLimits(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { minDebt: BigNumber; maxDebt: BigNumber }
    >;

    degenNFT(overrides?: CallOverrides): Promise<string>;

    eraseAllBotPermissionsAtClosure(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    expirable(overrides?: CallOverrides): Promise<boolean>;

    expirationDate(overrides?: CallOverrides): Promise<number>;

    forbiddenTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    isExpired(overrides?: CallOverrides): Promise<boolean>;

    lastBlockBorrowedInt(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateCreditAccount(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skipTokenMask: PromiseOrValue<BigNumberish>,
      convertToETH: PromiseOrValue<boolean>,
      calls: MultiCallStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    lossParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentCumulativeLoss: BigNumber;
        maxCumulativeLoss: BigNumber;
      }
    >;

    maxApprovedBots(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtPerBlockMultiplier(overrides?: CallOverrides): Promise<number>;

    maxQuotaMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    multicallInt(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      enabledTokensMask: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<FullCheckParamsStructOutput>;

    openCreditAccount(
      debt: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    revertIfNoPermission(
      flags: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revertIfOutOfBorrowingLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revertIfOutOfDebtLimits(
      debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revertIfOutOfTotalDebtLimit(
      delta: PromiseOrValue<BigNumberish>,
      action: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBotList(
      _botList: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBotPermissions(
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      fundingAmount: PromiseOrValue<BigNumberish>,
      weeklyFundingAllowance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCumulativeLoss(
      newLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCumulativeLossParams(
      _maxCumulativeLoss: PromiseOrValue<BigNumberish>,
      resetCumulativeLoss: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentCumulativeLoss(
      _currentCumulativeLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebtLimits(
      _minDebt: PromiseOrValue<BigNumberish>,
      _maxDebt: PromiseOrValue<BigNumberish>,
      _maxDebtPerBlockMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyLiquidator(
      liquidator: PromiseOrValue<string>,
      allowanceAction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpirationDate(
      newExpirationDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLastBlockBorrowed(
      _lastBlockBorrowed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReentrancy(
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAllowance(
      token: PromiseOrValue<string>,
      allowance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalBorrowedInBlock(
      _totalBorrowedInBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalDebtParams(
      newCurrentTotalDebt: PromiseOrValue<BigNumberish>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBorrowedInBlockInt(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentTotalDebt: BigNumber;
        totalDebtLimit: BigNumber;
      }
    >;

    trackTotalDebt(overrides?: CallOverrides): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawalManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddCollateral(address,address,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      value?: null
    ): AddCollateralEventFilter;
    AddCollateral(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      value?: null
    ): AddCollateralEventFilter;

    "CloseCreditAccount(address,address,address)"(
      creditAccount?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): CloseCreditAccountEventFilter;
    CloseCreditAccount(
      creditAccount?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): CloseCreditAccountEventFilter;

    "DecreaseDebt(address,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      amount?: null
    ): DecreaseDebtEventFilter;
    DecreaseDebt(
      creditAccount?: PromiseOrValue<string> | null,
      amount?: null
    ): DecreaseDebtEventFilter;

    "Execute(address,address)"(
      creditAccount?: PromiseOrValue<string> | null,
      targetContract?: PromiseOrValue<string> | null
    ): ExecuteEventFilter;
    Execute(
      creditAccount?: PromiseOrValue<string> | null,
      targetContract?: PromiseOrValue<string> | null
    ): ExecuteEventFilter;

    "FinishMultiCall()"(): FinishMultiCallEventFilter;
    FinishMultiCall(): FinishMultiCallEventFilter;

    "IncreaseDebt(address,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      amount?: null
    ): IncreaseDebtEventFilter;
    IncreaseDebt(
      creditAccount?: PromiseOrValue<string> | null,
      amount?: null
    ): IncreaseDebtEventFilter;

    "LiquidateCreditAccount(address,address,address,address,uint8,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      to?: null,
      closureAction?: null,
      remainingFunds?: null
    ): LiquidateCreditAccountEventFilter;
    LiquidateCreditAccount(
      creditAccount?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      to?: null,
      closureAction?: null,
      remainingFunds?: null
    ): LiquidateCreditAccountEventFilter;

    "NewController(address)"(
      newController?: PromiseOrValue<string> | null
    ): NewControllerEventFilter;
    NewController(
      newController?: PromiseOrValue<string> | null
    ): NewControllerEventFilter;

    "OpenCreditAccount(address,address,address,uint256,uint16)"(
      creditAccount?: PromiseOrValue<string> | null,
      onBehalfOf?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      debt?: null,
      referralCode?: null
    ): OpenCreditAccountEventFilter;
    OpenCreditAccount(
      creditAccount?: PromiseOrValue<string> | null,
      onBehalfOf?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      debt?: null,
      referralCode?: null
    ): OpenCreditAccountEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SetEnabledTokensMask(address,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      enabledTokensMask?: null
    ): SetEnabledTokensMaskEventFilter;
    SetEnabledTokensMask(
      creditAccount?: PromiseOrValue<string> | null,
      enabledTokensMask?: null
    ): SetEnabledTokensMaskEventFilter;

    "StartMultiCall(address,address)"(
      creditAccount?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): StartMultiCallEventFilter;
    StartMultiCall(
      creditAccount?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): StartMultiCallEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    acl(overrides?: CallOverrides): Promise<BigNumber>;

    botList(overrides?: CallOverrides): Promise<BigNumber>;

    botMulticall(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canLiquidateWhilePaused(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimWithdrawals(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeCreditAccount(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skipTokenMask: PromiseOrValue<BigNumberish>,
      convertToETH: PromiseOrValue<boolean>,
      calls: MultiCallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    creditManager(overrides?: CallOverrides): Promise<BigNumber>;

    debtLimits(overrides?: CallOverrides): Promise<BigNumber>;

    degenNFT(overrides?: CallOverrides): Promise<BigNumber>;

    eraseAllBotPermissionsAtClosure(
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expirable(overrides?: CallOverrides): Promise<BigNumber>;

    expirationDate(overrides?: CallOverrides): Promise<BigNumber>;

    forbiddenTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    isExpired(overrides?: CallOverrides): Promise<BigNumber>;

    lastBlockBorrowedInt(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateCreditAccount(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skipTokenMask: PromiseOrValue<BigNumberish>,
      convertToETH: PromiseOrValue<boolean>,
      calls: MultiCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lossParams(overrides?: CallOverrides): Promise<BigNumber>;

    maxApprovedBots(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtPerBlockMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    maxQuotaMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicallInt(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      enabledTokensMask: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openCreditAccount(
      debt: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    revertIfNoPermission(
      flags: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertIfOutOfBorrowingLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revertIfOutOfDebtLimits(
      debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertIfOutOfTotalDebtLimit(
      delta: PromiseOrValue<BigNumberish>,
      action: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBotList(
      _botList: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBotPermissions(
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      fundingAmount: PromiseOrValue<BigNumberish>,
      weeklyFundingAllowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCumulativeLoss(
      newLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCumulativeLossParams(
      _maxCumulativeLoss: PromiseOrValue<BigNumberish>,
      resetCumulativeLoss: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCurrentCumulativeLoss(
      _currentCumulativeLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDebtLimits(
      _minDebt: PromiseOrValue<BigNumberish>,
      _maxDebt: PromiseOrValue<BigNumberish>,
      _maxDebtPerBlockMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEmergencyLiquidator(
      liquidator: PromiseOrValue<string>,
      allowanceAction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExpirationDate(
      newExpirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLastBlockBorrowed(
      _lastBlockBorrowed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReentrancy(
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenAllowance(
      token: PromiseOrValue<string>,
      allowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTotalBorrowedInBlock(
      _totalBorrowedInBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTotalDebtParams(
      newCurrentTotalDebt: PromiseOrValue<BigNumberish>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalBorrowedInBlockInt(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    trackTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    botList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    botMulticall(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canLiquidateWhilePaused(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimWithdrawals(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeCreditAccount(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skipTokenMask: PromiseOrValue<BigNumberish>,
      convertToETH: PromiseOrValue<boolean>,
      calls: MultiCallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    degenNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eraseAllBotPermissionsAtClosure(
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expirable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expirationDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forbiddenTokenMask(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExpired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBlockBorrowedInt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateCreditAccount(
      creditAccount: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skipTokenMask: PromiseOrValue<BigNumberish>,
      convertToETH: PromiseOrValue<boolean>,
      calls: MultiCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lossParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxApprovedBots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDebtPerBlockMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxQuotaMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicallInt(
      creditAccount: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      enabledTokensMask: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openCreditAccount(
      debt: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      calls: MultiCallStruct[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revertIfNoPermission(
      flags: PromiseOrValue<BigNumberish>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertIfOutOfBorrowingLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revertIfOutOfDebtLimits(
      debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertIfOutOfTotalDebtLimit(
      delta: PromiseOrValue<BigNumberish>,
      action: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBotList(
      _botList: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBotPermissions(
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      fundingAmount: PromiseOrValue<BigNumberish>,
      weeklyFundingAllowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCumulativeLoss(
      newLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCumulativeLossParams(
      _maxCumulativeLoss: PromiseOrValue<BigNumberish>,
      resetCumulativeLoss: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentCumulativeLoss(
      _currentCumulativeLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDebtLimits(
      _minDebt: PromiseOrValue<BigNumberish>,
      _maxDebt: PromiseOrValue<BigNumberish>,
      _maxDebtPerBlockMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyLiquidator(
      liquidator: PromiseOrValue<string>,
      allowanceAction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExpirationDate(
      newExpirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLastBlockBorrowed(
      _lastBlockBorrowed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReentrancy(
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAllowance(
      token: PromiseOrValue<string>,
      allowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTotalBorrowedInBlock(
      _totalBorrowedInBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTotalDebtParams(
      newCurrentTotalDebt: PromiseOrValue<BigNumberish>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalBorrowedInBlockInt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trackTotalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
