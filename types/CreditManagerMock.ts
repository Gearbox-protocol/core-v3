/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type CollateralDebtDataStruct = {
  debt: PromiseOrValue<BigNumberish>;
  cumulativeIndexNow: PromiseOrValue<BigNumberish>;
  cumulativeIndexLastUpdate: PromiseOrValue<BigNumberish>;
  cumulativeQuotaInterest: PromiseOrValue<BigNumberish>;
  accruedInterest: PromiseOrValue<BigNumberish>;
  accruedFees: PromiseOrValue<BigNumberish>;
  totalDebtUSD: PromiseOrValue<BigNumberish>;
  totalValue: PromiseOrValue<BigNumberish>;
  totalValueUSD: PromiseOrValue<BigNumberish>;
  twvUSD: PromiseOrValue<BigNumberish>;
  enabledTokensMask: PromiseOrValue<BigNumberish>;
  quotedTokensMask: PromiseOrValue<BigNumberish>;
  quotedTokens: PromiseOrValue<string>[];
  _poolQuotaKeeper: PromiseOrValue<string>;
};

export type CollateralDebtDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string[],
  string
] & {
  debt: BigNumber;
  cumulativeIndexNow: BigNumber;
  cumulativeIndexLastUpdate: BigNumber;
  cumulativeQuotaInterest: BigNumber;
  accruedInterest: BigNumber;
  accruedFees: BigNumber;
  totalDebtUSD: BigNumber;
  totalValue: BigNumber;
  totalValueUSD: BigNumber;
  twvUSD: BigNumber;
  enabledTokensMask: BigNumber;
  quotedTokensMask: BigNumber;
  quotedTokens: string[];
  _poolQuotaKeeper: string;
};

export type RevocationPairStruct = {
  spender: PromiseOrValue<string>;
  token: PromiseOrValue<string>;
};

export type RevocationPairStructOutput = [string, string] & {
  spender: string;
  token: string;
};

export interface CreditManagerMockInterface extends utils.Interface {
  functions: {
    "adapterToContract(address)": FunctionFragment;
    "addCollateral(address,address,address,uint256)": FunctionFragment;
    "addToken(address,uint256)": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "calcDebtAndCollateral(address,uint8)": FunctionFragment;
    "claimWithdrawals(address,address,uint8)": FunctionFragment;
    "closeCollateralDebtData()": FunctionFragment;
    "closeCreditAccount(address,uint8,(uint256,uint256,uint256,uint128,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],address),address,address,uint256,bool)": FunctionFragment;
    "contractToAdapter(address)": FunctionFragment;
    "creditConfigurator()": FunctionFragment;
    "creditFacade()": FunctionFragment;
    "enabledTokensMaskOf(address)": FunctionFragment;
    "execute(bytes)": FunctionFragment;
    "flagsOf(address)": FunctionFragment;
    "fullCollateralCheck(address,uint256,uint256[],uint16)": FunctionFragment;
    "getBorrowerOrRevert(address)": FunctionFragment;
    "getTokenMaskOrRevert(address)": FunctionFragment;
    "lendCreditAccount(uint256,address)": FunctionFragment;
    "manageDebt(address,uint256,uint256,uint8)": FunctionFragment;
    "openCreditAccount(uint256,address)": FunctionFragment;
    "pool()": FunctionFragment;
    "poolService()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "quotedTokensMask()": FunctionFragment;
    "repayCreditAccount(uint256,uint256,uint256)": FunctionFragment;
    "revokeAdapterAllowances(address,(address,address)[])": FunctionFragment;
    "scheduleWithdrawal(address,address,uint256)": FunctionFragment;
    "setActiveCreditAccount(address)": FunctionFragment;
    "setAddCollateral(uint256)": FunctionFragment;
    "setBorrower(address)": FunctionFragment;
    "setClaimWithdrawals(uint256)": FunctionFragment;
    "setCloseCreditAccountReturns(uint256,uint256)": FunctionFragment;
    "setContractAllowance(address,address)": FunctionFragment;
    "setCreditFacade(address)": FunctionFragment;
    "setDebtAndCollateralData((uint256,uint256,uint256,uint128,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[],address))": FunctionFragment;
    "setEnabledTokensMask(uint256)": FunctionFragment;
    "setFlagFor(address,uint16,bool)": FunctionFragment;
    "setManageDebt(uint256,uint256,uint256)": FunctionFragment;
    "setPoolService(address)": FunctionFragment;
    "setPriceOracle(address)": FunctionFragment;
    "setQuotedTokensMask(uint256)": FunctionFragment;
    "setReturnOpenCreditAccount(address)": FunctionFragment;
    "setRevertOnActiveAccount(bool)": FunctionFragment;
    "setScheduleWithdrawal(uint256)": FunctionFragment;
    "setSupportsQuotas(bool)": FunctionFragment;
    "setUpdateQuota(uint256,uint256)": FunctionFragment;
    "supportsQuotas()": FunctionFragment;
    "tokenMasksMap(address)": FunctionFragment;
    "underlying()": FunctionFragment;
    "updateQuota(address,address,int96,uint96,uint96)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawalManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adapterToContract"
      | "addCollateral"
      | "addToken"
      | "addressProvider"
      | "calcDebtAndCollateral"
      | "claimWithdrawals"
      | "closeCollateralDebtData"
      | "closeCreditAccount"
      | "contractToAdapter"
      | "creditConfigurator"
      | "creditFacade"
      | "enabledTokensMaskOf"
      | "execute"
      | "flagsOf"
      | "fullCollateralCheck"
      | "getBorrowerOrRevert"
      | "getTokenMaskOrRevert"
      | "lendCreditAccount"
      | "manageDebt"
      | "openCreditAccount"
      | "pool"
      | "poolService"
      | "priceOracle"
      | "quotedTokensMask"
      | "repayCreditAccount"
      | "revokeAdapterAllowances"
      | "scheduleWithdrawal"
      | "setActiveCreditAccount"
      | "setAddCollateral"
      | "setBorrower"
      | "setClaimWithdrawals"
      | "setCloseCreditAccountReturns"
      | "setContractAllowance"
      | "setCreditFacade"
      | "setDebtAndCollateralData"
      | "setEnabledTokensMask"
      | "setFlagFor"
      | "setManageDebt"
      | "setPoolService"
      | "setPriceOracle"
      | "setQuotedTokensMask"
      | "setReturnOpenCreditAccount"
      | "setRevertOnActiveAccount"
      | "setScheduleWithdrawal"
      | "setSupportsQuotas"
      | "setUpdateQuota"
      | "supportsQuotas"
      | "tokenMasksMap"
      | "underlying"
      | "updateQuota"
      | "weth"
      | "withdrawalManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adapterToContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcDebtAndCollateral",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawals",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeCollateralDebtData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeCreditAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      CollateralDebtDataStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contractToAdapter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditConfigurator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditFacade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enabledTokensMaskOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "flagsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fullCollateralCheck",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowerOrRevert",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMaskOrRevert",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lendCreditAccount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "manageDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openCreditAccount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quotedTokensMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditAccount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdapterAllowances",
    values: [PromiseOrValue<string>, RevocationPairStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleWithdrawal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setActiveCreditAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddCollateral",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrower",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimWithdrawals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCloseCreditAccountReturns",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditFacade",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtAndCollateralData",
    values: [CollateralDebtDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnabledTokensMask",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlagFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setManageDebt",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolService",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuotedTokensMask",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReturnOpenCreditAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevertOnActiveAccount",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setScheduleWithdrawal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportsQuotas",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateQuota",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsQuotas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMasksMap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuota",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawalManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "adapterToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcDebtAndCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCollateralDebtData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractToAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFacade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledTokensMaskOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flagsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullCollateralCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowerOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMaskOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manageDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotedTokensMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdapterAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActiveCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCloseCreditAccountReturns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditFacade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtAndCollateralData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnabledTokensMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFlagFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManageDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuotedTokensMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReturnOpenCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevertOnActiveAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setScheduleWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportsQuotas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateQuota",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsQuotas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMasksMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateQuota",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalManager",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CreditManagerMock extends BaseContract {
  contractName: "CreditManagerMock";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditManagerMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adapterToContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addCollateral(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenMask: BigNumber }>;

    addToken(
      token: PromiseOrValue<string>,
      mask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    calcDebtAndCollateral(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CollateralDebtDataStructOutput]>;

    claimWithdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokensToEnable: BigNumber }>;

    closeCollateralDebtData(
      overrides?: CallOverrides
    ): Promise<[CollateralDebtDataStructOutput]>;

    closeCreditAccount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      collateralDebtData: CollateralDebtDataStruct,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractToAdapter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creditConfigurator(overrides?: CallOverrides): Promise<[string]>;

    creditFacade(overrides?: CallOverrides): Promise<[string]>;

    enabledTokensMaskOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    execute(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flagsOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    fullCollateralCheck(
      arg0: PromiseOrValue<string>,
      enabledTokensMask: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBorrowerOrRevert(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenMaskOrRevert(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenMask: BigNumber }>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      ca: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    manageDebt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        newDebt: BigNumber;
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    openCreditAccount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { creditAccount: string }>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    poolService(overrides?: CallOverrides): Promise<[string]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    quotedTokensMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    repayCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeAdapterAllowances(
      creditAccount: PromiseOrValue<string>,
      revocations: RevocationPairStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scheduleWithdrawal(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokensToDisable: BigNumber }>;

    setActiveCreditAccount(
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddCollateral(
      tokenMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBorrower(
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimWithdrawals(
      tokensToEnable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCloseCreditAccountReturns(
      remainingFunds: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractAllowance(
      adapter: PromiseOrValue<string>,
      targetContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCreditFacade(
      _creditFacade: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDebtAndCollateralData(
      _collateralDebtData: CollateralDebtDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEnabledTokensMask(
      newEnabledTokensMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFlagFor(
      creditAccount: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManageDebt(
      newDebt: PromiseOrValue<BigNumberish>,
      tokensToEnable: PromiseOrValue<BigNumberish>,
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolService(
      newPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuotedTokensMask(
      _quotedTokensMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReturnOpenCreditAccount(
      _nextCreditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRevertOnActiveAccount(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setScheduleWithdrawal(
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSupportsQuotas(
      _supportsQuotas: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpdateQuota(
      tokensToEnable: PromiseOrValue<BigNumberish>,
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsQuotas(overrides?: CallOverrides): Promise<[boolean]>;

    tokenMasksMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    updateQuota(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawalManager(overrides?: CallOverrides): Promise<[string]>;
  };

  adapterToContract(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  addCollateral(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addToken(
    token: PromiseOrValue<string>,
    mask: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  calcDebtAndCollateral(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CollateralDebtDataStructOutput>;

  claimWithdrawals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closeCollateralDebtData(
    overrides?: CallOverrides
  ): Promise<CollateralDebtDataStructOutput>;

  closeCreditAccount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    collateralDebtData: CollateralDebtDataStruct,
    arg3: PromiseOrValue<string>,
    arg4: PromiseOrValue<string>,
    arg5: PromiseOrValue<BigNumberish>,
    arg6: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractToAdapter(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  creditConfigurator(overrides?: CallOverrides): Promise<string>;

  creditFacade(overrides?: CallOverrides): Promise<string>;

  enabledTokensMaskOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  execute(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flagsOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  fullCollateralCheck(
    arg0: PromiseOrValue<string>,
    enabledTokensMask: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBorrowerOrRevert(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenMaskOrRevert(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lendCreditAccount(
    borrowedAmount: PromiseOrValue<BigNumberish>,
    ca: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  manageDebt(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      newDebt: BigNumber;
      tokensToEnable: BigNumber;
      tokensToDisable: BigNumber;
    }
  >;

  openCreditAccount(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  poolService(overrides?: CallOverrides): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  quotedTokensMask(overrides?: CallOverrides): Promise<BigNumber>;

  repayCreditAccount(
    borrowedAmount: PromiseOrValue<BigNumberish>,
    profit: PromiseOrValue<BigNumberish>,
    loss: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeAdapterAllowances(
    creditAccount: PromiseOrValue<string>,
    revocations: RevocationPairStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scheduleWithdrawal(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setActiveCreditAccount(
    creditAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddCollateral(
    tokenMask: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBorrower(
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimWithdrawals(
    tokensToEnable: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCloseCreditAccountReturns(
    remainingFunds: PromiseOrValue<BigNumberish>,
    loss: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractAllowance(
    adapter: PromiseOrValue<string>,
    targetContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCreditFacade(
    _creditFacade: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDebtAndCollateralData(
    _collateralDebtData: CollateralDebtDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEnabledTokensMask(
    newEnabledTokensMask: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFlagFor(
    creditAccount: PromiseOrValue<string>,
    flag: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManageDebt(
    newDebt: PromiseOrValue<BigNumberish>,
    tokensToEnable: PromiseOrValue<BigNumberish>,
    tokensToDisable: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolService(
    newPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceOracle(
    _priceOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuotedTokensMask(
    _quotedTokensMask: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReturnOpenCreditAccount(
    _nextCreditAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRevertOnActiveAccount(
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setScheduleWithdrawal(
    tokensToDisable: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSupportsQuotas(
    _supportsQuotas: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpdateQuota(
    tokensToEnable: PromiseOrValue<BigNumberish>,
    tokensToDisable: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsQuotas(overrides?: CallOverrides): Promise<boolean>;

  tokenMasksMap(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  underlying(overrides?: CallOverrides): Promise<string>;

  updateQuota(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      tokensToEnable: BigNumber;
      tokensToDisable: BigNumber;
    }
  >;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawalManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    adapterToContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    addCollateral(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addToken(
      token: PromiseOrValue<string>,
      mask: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    calcDebtAndCollateral(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CollateralDebtDataStructOutput>;

    claimWithdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeCollateralDebtData(
      overrides?: CallOverrides
    ): Promise<CollateralDebtDataStructOutput>;

    closeCreditAccount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      collateralDebtData: CollateralDebtDataStruct,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { remainingFunds: BigNumber; loss: BigNumber }
    >;

    contractToAdapter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    creditConfigurator(overrides?: CallOverrides): Promise<string>;

    creditFacade(overrides?: CallOverrides): Promise<string>;

    enabledTokensMaskOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    flagsOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    fullCollateralCheck(
      arg0: PromiseOrValue<string>,
      enabledTokensMask: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowerOrRevert(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenMaskOrRevert(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      ca: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    manageDebt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        newDebt: BigNumber;
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    openCreditAccount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    poolService(overrides?: CallOverrides): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    quotedTokensMask(overrides?: CallOverrides): Promise<BigNumber>;

    repayCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAdapterAllowances(
      creditAccount: PromiseOrValue<string>,
      revocations: RevocationPairStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    scheduleWithdrawal(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setActiveCreditAccount(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddCollateral(
      tokenMask: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrower(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimWithdrawals(
      tokensToEnable: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCloseCreditAccountReturns(
      remainingFunds: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractAllowance(
      adapter: PromiseOrValue<string>,
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditFacade(
      _creditFacade: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebtAndCollateralData(
      _collateralDebtData: CollateralDebtDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnabledTokensMask(
      newEnabledTokensMask: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFlagFor(
      creditAccount: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManageDebt(
      newDebt: PromiseOrValue<BigNumberish>,
      tokensToEnable: PromiseOrValue<BigNumberish>,
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolService(
      newPool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuotedTokensMask(
      _quotedTokensMask: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReturnOpenCreditAccount(
      _nextCreditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevertOnActiveAccount(
      _value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setScheduleWithdrawal(
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportsQuotas(
      _supportsQuotas: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdateQuota(
      tokensToEnable: PromiseOrValue<BigNumberish>,
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsQuotas(overrides?: CallOverrides): Promise<boolean>;

    tokenMasksMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<string>;

    updateQuota(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokensToEnable: BigNumber;
        tokensToDisable: BigNumber;
      }
    >;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawalManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    adapterToContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCollateral(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addToken(
      token: PromiseOrValue<string>,
      mask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    calcDebtAndCollateral(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimWithdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeCollateralDebtData(overrides?: CallOverrides): Promise<BigNumber>;

    closeCreditAccount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      collateralDebtData: CollateralDebtDataStruct,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractToAdapter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditConfigurator(overrides?: CallOverrides): Promise<BigNumber>;

    creditFacade(overrides?: CallOverrides): Promise<BigNumber>;

    enabledTokensMaskOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flagsOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fullCollateralCheck(
      arg0: PromiseOrValue<string>,
      enabledTokensMask: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowerOrRevert(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenMaskOrRevert(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      ca: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    manageDebt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openCreditAccount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    poolService(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    quotedTokensMask(overrides?: CallOverrides): Promise<BigNumber>;

    repayCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeAdapterAllowances(
      creditAccount: PromiseOrValue<string>,
      revocations: RevocationPairStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scheduleWithdrawal(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setActiveCreditAccount(
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddCollateral(
      tokenMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBorrower(
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimWithdrawals(
      tokensToEnable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCloseCreditAccountReturns(
      remainingFunds: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractAllowance(
      adapter: PromiseOrValue<string>,
      targetContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCreditFacade(
      _creditFacade: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDebtAndCollateralData(
      _collateralDebtData: CollateralDebtDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEnabledTokensMask(
      newEnabledTokensMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFlagFor(
      creditAccount: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManageDebt(
      newDebt: PromiseOrValue<BigNumberish>,
      tokensToEnable: PromiseOrValue<BigNumberish>,
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolService(
      newPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuotedTokensMask(
      _quotedTokensMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReturnOpenCreditAccount(
      _nextCreditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRevertOnActiveAccount(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setScheduleWithdrawal(
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSupportsQuotas(
      _supportsQuotas: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpdateQuota(
      tokensToEnable: PromiseOrValue<BigNumberish>,
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsQuotas(overrides?: CallOverrides): Promise<BigNumber>;

    tokenMasksMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    updateQuota(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adapterToContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addCollateral(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToken(
      token: PromiseOrValue<string>,
      mask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcDebtAndCollateral(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimWithdrawals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeCollateralDebtData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeCreditAccount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      collateralDebtData: CollateralDebtDataStruct,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractToAdapter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditConfigurator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditFacade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enabledTokensMaskOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flagsOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fullCollateralCheck(
      arg0: PromiseOrValue<string>,
      enabledTokensMask: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowerOrRevert(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenMaskOrRevert(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      ca: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    manageDebt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openCreditAccount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quotedTokensMask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repayCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeAdapterAllowances(
      creditAccount: PromiseOrValue<string>,
      revocations: RevocationPairStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scheduleWithdrawal(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setActiveCreditAccount(
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddCollateral(
      tokenMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBorrower(
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimWithdrawals(
      tokensToEnable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCloseCreditAccountReturns(
      remainingFunds: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractAllowance(
      adapter: PromiseOrValue<string>,
      targetContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCreditFacade(
      _creditFacade: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDebtAndCollateralData(
      _collateralDebtData: CollateralDebtDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEnabledTokensMask(
      newEnabledTokensMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFlagFor(
      creditAccount: PromiseOrValue<string>,
      flag: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManageDebt(
      newDebt: PromiseOrValue<BigNumberish>,
      tokensToEnable: PromiseOrValue<BigNumberish>,
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolService(
      newPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuotedTokensMask(
      _quotedTokensMask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReturnOpenCreditAccount(
      _nextCreditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRevertOnActiveAccount(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setScheduleWithdrawal(
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSupportsQuotas(
      _supportsQuotas: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpdateQuota(
      tokensToEnable: PromiseOrValue<BigNumberish>,
      tokensToDisable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsQuotas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenMasksMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateQuota(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
