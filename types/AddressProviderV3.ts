/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AddressProviderV3Interface extends utils.Interface {
  functions: {
    "addresses(bytes32,uint256)": FunctionFragment;
    "getACL()": FunctionFragment;
    "getAccountFactory()": FunctionFragment;
    "getAddressOrRevert(bytes32,uint256)": FunctionFragment;
    "getContractsRegister()": FunctionFragment;
    "getDataCompressor()": FunctionFragment;
    "getGearToken()": FunctionFragment;
    "getLeveragedActions()": FunctionFragment;
    "getPriceOracle()": FunctionFragment;
    "getTreasuryContract()": FunctionFragment;
    "getWETHGateway()": FunctionFragment;
    "getWethToken()": FunctionFragment;
    "setAddress(bytes32,address,bool)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addresses"
      | "getACL"
      | "getAccountFactory"
      | "getAddressOrRevert"
      | "getContractsRegister"
      | "getDataCompressor"
      | "getGearToken"
      | "getLeveragedActions"
      | "getPriceOracle"
      | "getTreasuryContract"
      | "getWETHGateway"
      | "getWethToken"
      | "setAddress"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addresses",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getACL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressOrRevert",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsRegister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataCompressor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGearToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeveragedActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWETHGateway",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWethToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getACL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataCompressor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGearToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeveragedActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWETHGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWethToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "SetAddress(bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetAddress"): EventFragment;
}

export interface SetAddressEventObject {
  key: string;
  value: string;
  version: BigNumber;
}
export type SetAddressEvent = TypedEvent<
  [string, string, BigNumber],
  SetAddressEventObject
>;

export type SetAddressEventFilter = TypedEventFilter<SetAddressEvent>;

export interface AddressProviderV3 extends BaseContract {
  contractName: "AddressProviderV3";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AddressProviderV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addresses(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getACL(overrides?: CallOverrides): Promise<[string]>;

    getAccountFactory(overrides?: CallOverrides): Promise<[string]>;

    getAddressOrRevert(
      key: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    getContractsRegister(overrides?: CallOverrides): Promise<[string]>;

    getDataCompressor(overrides?: CallOverrides): Promise<[string]>;

    getGearToken(overrides?: CallOverrides): Promise<[string]>;

    getLeveragedActions(overrides?: CallOverrides): Promise<[string]>;

    getPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    getTreasuryContract(overrides?: CallOverrides): Promise<[string]>;

    getWETHGateway(overrides?: CallOverrides): Promise<[string]>;

    getWethToken(overrides?: CallOverrides): Promise<[string]>;

    setAddress(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      saveVersion: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addresses(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getACL(overrides?: CallOverrides): Promise<string>;

  getAccountFactory(overrides?: CallOverrides): Promise<string>;

  getAddressOrRevert(
    key: PromiseOrValue<BytesLike>,
    _version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getContractsRegister(overrides?: CallOverrides): Promise<string>;

  getDataCompressor(overrides?: CallOverrides): Promise<string>;

  getGearToken(overrides?: CallOverrides): Promise<string>;

  getLeveragedActions(overrides?: CallOverrides): Promise<string>;

  getPriceOracle(overrides?: CallOverrides): Promise<string>;

  getTreasuryContract(overrides?: CallOverrides): Promise<string>;

  getWETHGateway(overrides?: CallOverrides): Promise<string>;

  getWethToken(overrides?: CallOverrides): Promise<string>;

  setAddress(
    key: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<string>,
    saveVersion: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addresses(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getACL(overrides?: CallOverrides): Promise<string>;

    getAccountFactory(overrides?: CallOverrides): Promise<string>;

    getAddressOrRevert(
      key: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getContractsRegister(overrides?: CallOverrides): Promise<string>;

    getDataCompressor(overrides?: CallOverrides): Promise<string>;

    getGearToken(overrides?: CallOverrides): Promise<string>;

    getLeveragedActions(overrides?: CallOverrides): Promise<string>;

    getPriceOracle(overrides?: CallOverrides): Promise<string>;

    getTreasuryContract(overrides?: CallOverrides): Promise<string>;

    getWETHGateway(overrides?: CallOverrides): Promise<string>;

    getWethToken(overrides?: CallOverrides): Promise<string>;

    setAddress(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      saveVersion: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "SetAddress(bytes32,address,uint256)"(
      key?: PromiseOrValue<BytesLike> | null,
      value?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<BigNumberish> | null
    ): SetAddressEventFilter;
    SetAddress(
      key?: PromiseOrValue<BytesLike> | null,
      value?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<BigNumberish> | null
    ): SetAddressEventFilter;
  };

  estimateGas: {
    addresses(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getACL(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getAddressOrRevert(
      key: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractsRegister(overrides?: CallOverrides): Promise<BigNumber>;

    getDataCompressor(overrides?: CallOverrides): Promise<BigNumber>;

    getGearToken(overrides?: CallOverrides): Promise<BigNumber>;

    getLeveragedActions(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryContract(overrides?: CallOverrides): Promise<BigNumber>;

    getWETHGateway(overrides?: CallOverrides): Promise<BigNumber>;

    getWethToken(overrides?: CallOverrides): Promise<BigNumber>;

    setAddress(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      saveVersion: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addresses(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getACL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAddressOrRevert(
      key: PromiseOrValue<BytesLike>,
      _version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractsRegister(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataCompressor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGearToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLeveragedActions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTreasuryContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWETHGateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWethToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddress(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      saveVersion: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
