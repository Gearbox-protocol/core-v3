/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IAccountFactoryV3EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AddCreditManager(address,address)": EventFragment;
    "DeployCreditAccount(address,address)": EventFragment;
    "ReturnCreditAccount(address,address)": EventFragment;
    "TakeCreditAccount(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCreditManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReturnCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeCreditAccount"): EventFragment;
}

export interface AddCreditManagerEventObject {
  creditManager: string;
  masterCreditAccount: string;
}
export type AddCreditManagerEvent = TypedEvent<
  [string, string],
  AddCreditManagerEventObject
>;

export type AddCreditManagerEventFilter =
  TypedEventFilter<AddCreditManagerEvent>;

export interface DeployCreditAccountEventObject {
  creditAccount: string;
  creditManager: string;
}
export type DeployCreditAccountEvent = TypedEvent<
  [string, string],
  DeployCreditAccountEventObject
>;

export type DeployCreditAccountEventFilter =
  TypedEventFilter<DeployCreditAccountEvent>;

export interface ReturnCreditAccountEventObject {
  creditAccount: string;
  creditManager: string;
}
export type ReturnCreditAccountEvent = TypedEvent<
  [string, string],
  ReturnCreditAccountEventObject
>;

export type ReturnCreditAccountEventFilter =
  TypedEventFilter<ReturnCreditAccountEvent>;

export interface TakeCreditAccountEventObject {
  creditAccount: string;
  creditManager: string;
}
export type TakeCreditAccountEvent = TypedEvent<
  [string, string],
  TakeCreditAccountEventObject
>;

export type TakeCreditAccountEventFilter =
  TypedEventFilter<TakeCreditAccountEvent>;

export interface IAccountFactoryV3Events extends BaseContract {
  contractName: "IAccountFactoryV3Events";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAccountFactoryV3EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AddCreditManager(address,address)"(
      creditManager?: PromiseOrValue<string> | null,
      masterCreditAccount?: null
    ): AddCreditManagerEventFilter;
    AddCreditManager(
      creditManager?: PromiseOrValue<string> | null,
      masterCreditAccount?: null
    ): AddCreditManagerEventFilter;

    "DeployCreditAccount(address,address)"(
      creditAccount?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null
    ): DeployCreditAccountEventFilter;
    DeployCreditAccount(
      creditAccount?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null
    ): DeployCreditAccountEventFilter;

    "ReturnCreditAccount(address,address)"(
      creditAccount?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null
    ): ReturnCreditAccountEventFilter;
    ReturnCreditAccount(
      creditAccount?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null
    ): ReturnCreditAccountEventFilter;

    "TakeCreditAccount(address,address)"(
      creditAccount?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null
    ): TakeCreditAccountEventFilter;
    TakeCreditAccount(
      creditAccount?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null
    ): TakeCreditAccountEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
