/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type MultiVoteStruct = {
  votingContract: PromiseOrValue<string>;
  voteAmount: PromiseOrValue<BigNumberish>;
  isIncrease: PromiseOrValue<boolean>;
  extraData: PromiseOrValue<BytesLike>;
};

export type MultiVoteStructOutput = [string, BigNumber, boolean, string] & {
  votingContract: string;
  voteAmount: BigNumber;
  isIncrease: boolean;
  extraData: string;
};

export interface GearStakingV3Interface extends utils.Interface {
  functions: {
    "acl()": FunctionFragment;
    "allowedVotingContract(address)": FunctionFragment;
    "availableBalance(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimWithdrawals(address)": FunctionFragment;
    "controller()": FunctionFragment;
    "deposit(uint96,(address,uint96,bool,bytes)[])": FunctionFragment;
    "depositOnMigration(uint96,address,(address,uint96,bool,bytes)[])": FunctionFragment;
    "firstEpochTimestamp()": FunctionFragment;
    "gear()": FunctionFragment;
    "getCurrentEpoch()": FunctionFragment;
    "getWithdrawableAmounts(address)": FunctionFragment;
    "migrate(uint96,(address,uint96,bool,bytes)[],(address,uint96,bool,bytes)[])": FunctionFragment;
    "migrator()": FunctionFragment;
    "multivote((address,uint96,bool,bytes)[])": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setMigrator(address)": FunctionFragment;
    "setSuccessor(address)": FunctionFragment;
    "setVotingContractStatus(address,uint8)": FunctionFragment;
    "successor()": FunctionFragment;
    "unpause()": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw(uint96,address,(address,uint96,bool,bytes)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acl"
      | "allowedVotingContract"
      | "availableBalance"
      | "balanceOf"
      | "claimWithdrawals"
      | "controller"
      | "deposit"
      | "depositOnMigration"
      | "firstEpochTimestamp"
      | "gear"
      | "getCurrentEpoch"
      | "getWithdrawableAmounts"
      | "migrate"
      | "migrator"
      | "multivote"
      | "pause"
      | "paused"
      | "setController"
      | "setMigrator"
      | "setSuccessor"
      | "setVotingContractStatus"
      | "successor"
      | "unpause"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowedVotingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "availableBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, MultiVoteStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOnMigration",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      MultiVoteStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "firstEpochTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gear", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableAmounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [PromiseOrValue<BigNumberish>, MultiVoteStruct[], MultiVoteStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "migrator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multivote",
    values: [MultiVoteStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigrator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSuccessor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingContractStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "successor", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      MultiVoteStruct[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedVotingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositOnMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstEpochTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multivote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSuccessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingContractStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "successor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ClaimGearWithdrawal(address,address,uint256)": EventFragment;
    "DepositGear(address,uint256)": EventFragment;
    "MigrateGear(address,address,uint256)": EventFragment;
    "NewController(address)": EventFragment;
    "Paused(address)": EventFragment;
    "ScheduleGearWithdrawal(address,uint256)": EventFragment;
    "SetMigrator(address)": EventFragment;
    "SetSuccessor(address)": EventFragment;
    "SetVotingContractStatus(address,uint8)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimGearWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositGear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateGear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleGearWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMigrator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSuccessor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVotingContractStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ClaimGearWithdrawalEventObject {
  user: string;
  to: string;
  amount: BigNumber;
}
export type ClaimGearWithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimGearWithdrawalEventObject
>;

export type ClaimGearWithdrawalEventFilter =
  TypedEventFilter<ClaimGearWithdrawalEvent>;

export interface DepositGearEventObject {
  user: string;
  amount: BigNumber;
}
export type DepositGearEvent = TypedEvent<
  [string, BigNumber],
  DepositGearEventObject
>;

export type DepositGearEventFilter = TypedEventFilter<DepositGearEvent>;

export interface MigrateGearEventObject {
  user: string;
  successor: string;
  amount: BigNumber;
}
export type MigrateGearEvent = TypedEvent<
  [string, string, BigNumber],
  MigrateGearEventObject
>;

export type MigrateGearEventFilter = TypedEventFilter<MigrateGearEvent>;

export interface NewControllerEventObject {
  newController: string;
}
export type NewControllerEvent = TypedEvent<[string], NewControllerEventObject>;

export type NewControllerEventFilter = TypedEventFilter<NewControllerEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ScheduleGearWithdrawalEventObject {
  user: string;
  amount: BigNumber;
}
export type ScheduleGearWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  ScheduleGearWithdrawalEventObject
>;

export type ScheduleGearWithdrawalEventFilter =
  TypedEventFilter<ScheduleGearWithdrawalEvent>;

export interface SetMigratorEventObject {
  migrator: string;
}
export type SetMigratorEvent = TypedEvent<[string], SetMigratorEventObject>;

export type SetMigratorEventFilter = TypedEventFilter<SetMigratorEvent>;

export interface SetSuccessorEventObject {
  successor: string;
}
export type SetSuccessorEvent = TypedEvent<[string], SetSuccessorEventObject>;

export type SetSuccessorEventFilter = TypedEventFilter<SetSuccessorEvent>;

export interface SetVotingContractStatusEventObject {
  votingContract: string;
  status: number;
}
export type SetVotingContractStatusEvent = TypedEvent<
  [string, number],
  SetVotingContractStatusEventObject
>;

export type SetVotingContractStatusEventFilter =
  TypedEventFilter<SetVotingContractStatusEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface GearStakingV3 extends BaseContract {
  contractName: "GearStakingV3";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GearStakingV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acl(overrides?: CallOverrides): Promise<[string]>;

    allowedVotingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    availableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimWithdrawals(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositOnMigration(
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    firstEpochTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    gear(overrides?: CallOverrides): Promise<[string]>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<[number]>;

    getWithdrawableAmounts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, [BigNumber, BigNumber, BigNumber, BigNumber]] & {
        withdrawableNow: BigNumber;
        withdrawableInEpochs: [BigNumber, BigNumber, BigNumber, BigNumber];
      }
    >;

    migrate(
      amount: PromiseOrValue<BigNumberish>,
      votesBefore: MultiVoteStruct[],
      votesAfter: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrator(overrides?: CallOverrides): Promise<[string]>;

    multivote(
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMigrator(
      newMigrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSuccessor(
      newSuccessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotingContractStatus(
      votingContract: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    successor(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acl(overrides?: CallOverrides): Promise<string>;

  allowedVotingContract(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  availableBalance(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimWithdrawals(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    votes: MultiVoteStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositOnMigration(
    amount: PromiseOrValue<BigNumberish>,
    onBehalfOf: PromiseOrValue<string>,
    votes: MultiVoteStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  firstEpochTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  gear(overrides?: CallOverrides): Promise<string>;

  getCurrentEpoch(overrides?: CallOverrides): Promise<number>;

  getWithdrawableAmounts(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, [BigNumber, BigNumber, BigNumber, BigNumber]] & {
      withdrawableNow: BigNumber;
      withdrawableInEpochs: [BigNumber, BigNumber, BigNumber, BigNumber];
    }
  >;

  migrate(
    amount: PromiseOrValue<BigNumberish>,
    votesBefore: MultiVoteStruct[],
    votesAfter: MultiVoteStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrator(overrides?: CallOverrides): Promise<string>;

  multivote(
    votes: MultiVoteStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setController(
    newController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMigrator(
    newMigrator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSuccessor(
    newSuccessor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotingContractStatus(
    votingContract: PromiseOrValue<string>,
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  successor(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    votes: MultiVoteStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acl(overrides?: CallOverrides): Promise<string>;

    allowedVotingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    availableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimWithdrawals(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      votes: MultiVoteStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositOnMigration(
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      votes: MultiVoteStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    firstEpochTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    gear(overrides?: CallOverrides): Promise<string>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<number>;

    getWithdrawableAmounts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, [BigNumber, BigNumber, BigNumber, BigNumber]] & {
        withdrawableNow: BigNumber;
        withdrawableInEpochs: [BigNumber, BigNumber, BigNumber, BigNumber];
      }
    >;

    migrate(
      amount: PromiseOrValue<BigNumberish>,
      votesBefore: MultiVoteStruct[],
      votesAfter: MultiVoteStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    migrator(overrides?: CallOverrides): Promise<string>;

    multivote(
      votes: MultiVoteStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrator(
      newMigrator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSuccessor(
      newSuccessor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingContractStatus(
      votingContract: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    successor(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      votes: MultiVoteStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimGearWithdrawal(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      to?: null,
      amount?: null
    ): ClaimGearWithdrawalEventFilter;
    ClaimGearWithdrawal(
      user?: PromiseOrValue<string> | null,
      to?: null,
      amount?: null
    ): ClaimGearWithdrawalEventFilter;

    "DepositGear(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositGearEventFilter;
    DepositGear(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositGearEventFilter;

    "MigrateGear(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      successor?: PromiseOrValue<string> | null,
      amount?: null
    ): MigrateGearEventFilter;
    MigrateGear(
      user?: PromiseOrValue<string> | null,
      successor?: PromiseOrValue<string> | null,
      amount?: null
    ): MigrateGearEventFilter;

    "NewController(address)"(
      newController?: PromiseOrValue<string> | null
    ): NewControllerEventFilter;
    NewController(
      newController?: PromiseOrValue<string> | null
    ): NewControllerEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ScheduleGearWithdrawal(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ScheduleGearWithdrawalEventFilter;
    ScheduleGearWithdrawal(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ScheduleGearWithdrawalEventFilter;

    "SetMigrator(address)"(
      migrator?: PromiseOrValue<string> | null
    ): SetMigratorEventFilter;
    SetMigrator(
      migrator?: PromiseOrValue<string> | null
    ): SetMigratorEventFilter;

    "SetSuccessor(address)"(
      successor?: PromiseOrValue<string> | null
    ): SetSuccessorEventFilter;
    SetSuccessor(
      successor?: PromiseOrValue<string> | null
    ): SetSuccessorEventFilter;

    "SetVotingContractStatus(address,uint8)"(
      votingContract?: PromiseOrValue<string> | null,
      status?: null
    ): SetVotingContractStatusEventFilter;
    SetVotingContractStatus(
      votingContract?: PromiseOrValue<string> | null,
      status?: null
    ): SetVotingContractStatusEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    acl(overrides?: CallOverrides): Promise<BigNumber>;

    allowedVotingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    availableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimWithdrawals(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositOnMigration(
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    firstEpochTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    gear(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawableAmounts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      amount: PromiseOrValue<BigNumberish>,
      votesBefore: MultiVoteStruct[],
      votesAfter: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrator(overrides?: CallOverrides): Promise<BigNumber>;

    multivote(
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMigrator(
      newMigrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSuccessor(
      newSuccessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotingContractStatus(
      votingContract: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    successor(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedVotingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availableBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimWithdrawals(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositOnMigration(
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    firstEpochTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWithdrawableAmounts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      amount: PromiseOrValue<BigNumberish>,
      votesBefore: MultiVoteStruct[],
      votesAfter: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multivote(
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMigrator(
      newMigrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSuccessor(
      newSuccessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotingContractStatus(
      votingContract: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    successor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      votes: MultiVoteStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
