/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PoolV3HarnessInterface extends utils.Interface {
  functions: {
    "acl()": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "availableLiquidity()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseInterestIndex()": FunctionFragment;
    "baseInterestIndexLU()": FunctionFragment;
    "baseInterestRate()": FunctionFragment;
    "calcBaseInterestAccrued()": FunctionFragment;
    "calcLinearCumulative_RAY()": FunctionFragment;
    "calcQuotaRevenueAccrued()": FunctionFragment;
    "contractsRegister()": FunctionFragment;
    "controller()": FunctionFragment;
    "convertToAssets(uint256)": FunctionFragment;
    "convertToShares(uint256)": FunctionFragment;
    "creditManagerBorrowable(address)": FunctionFragment;
    "creditManagerBorrowed(address)": FunctionFragment;
    "creditManagerDebtLimit(address)": FunctionFragment;
    "creditManagers()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "depositWithReferral(uint256,address,uint16)": FunctionFragment;
    "expectedLiquidity()": FunctionFragment;
    "expectedLiquidityLU()": FunctionFragment;
    "hackBaseInterestIndexLU(uint256)": FunctionFragment;
    "hackBaseInterestRate(uint256)": FunctionFragment;
    "hackCreditManagerBorrowed(address,uint256)": FunctionFragment;
    "hackExpectedLiquidityLU(uint256)": FunctionFragment;
    "hackQuotaRevenue(uint256)": FunctionFragment;
    "hackReentrancyStatus(bool)": FunctionFragment;
    "hackTotalBorrowed(uint256)": FunctionFragment;
    "hackTransferFee(uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "interestRateModel()": FunctionFragment;
    "lastBaseInterestUpdate()": FunctionFragment;
    "lastQuotaRevenueUpdate()": FunctionFragment;
    "lendCreditAccount(uint256,address)": FunctionFragment;
    "maxDeposit(address)": FunctionFragment;
    "maxMint(address)": FunctionFragment;
    "maxRedeem(address)": FunctionFragment;
    "maxWithdraw(address)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "mintWithReferral(uint256,address,uint16)": FunctionFragment;
    "name()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "poolQuotaKeeper()": FunctionFragment;
    "previewDeposit(uint256)": FunctionFragment;
    "previewMint(uint256)": FunctionFragment;
    "previewRedeem(uint256)": FunctionFragment;
    "previewWithdraw(uint256)": FunctionFragment;
    "quotaRevenue()": FunctionFragment;
    "redeem(uint256,address,address)": FunctionFragment;
    "repayCreditAccount(uint256,uint256,uint256)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setCreditManagerDebtLimit(address,uint256)": FunctionFragment;
    "setInterestRateModel(address)": FunctionFragment;
    "setPoolQuotaKeeper(address)": FunctionFragment;
    "setQuotaRevenue(uint256)": FunctionFragment;
    "setTotalDebtLimit(uint256)": FunctionFragment;
    "setWithdrawFee(uint256)": FunctionFragment;
    "supplyRate()": FunctionFragment;
    "supportsQuotas()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalBorrowed()": FunctionFragment;
    "totalDebtLimit()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "treasury()": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateBaseInterest(int256,int256,bool)": FunctionFragment;
    "updateQuotaRevenue(int256)": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw(uint256,address,address)": FunctionFragment;
    "withdrawFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acl"
      | "addressProvider"
      | "allowance"
      | "approve"
      | "asset"
      | "availableLiquidity"
      | "balanceOf"
      | "baseInterestIndex"
      | "baseInterestIndexLU"
      | "baseInterestRate"
      | "calcBaseInterestAccrued"
      | "calcLinearCumulative_RAY"
      | "calcQuotaRevenueAccrued"
      | "contractsRegister"
      | "controller"
      | "convertToAssets"
      | "convertToShares"
      | "creditManagerBorrowable"
      | "creditManagerBorrowed"
      | "creditManagerDebtLimit"
      | "creditManagers"
      | "decimals"
      | "decreaseAllowance"
      | "deposit"
      | "depositWithReferral"
      | "expectedLiquidity"
      | "expectedLiquidityLU"
      | "hackBaseInterestIndexLU"
      | "hackBaseInterestRate"
      | "hackCreditManagerBorrowed"
      | "hackExpectedLiquidityLU"
      | "hackQuotaRevenue"
      | "hackReentrancyStatus"
      | "hackTotalBorrowed"
      | "hackTransferFee"
      | "increaseAllowance"
      | "interestRateModel"
      | "lastBaseInterestUpdate"
      | "lastQuotaRevenueUpdate"
      | "lendCreditAccount"
      | "maxDeposit"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "mint"
      | "mintWithReferral"
      | "name"
      | "pause"
      | "paused"
      | "poolQuotaKeeper"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "quotaRevenue"
      | "redeem"
      | "repayCreditAccount"
      | "setController"
      | "setCreditManagerDebtLimit"
      | "setInterestRateModel"
      | "setPoolQuotaKeeper"
      | "setQuotaRevenue"
      | "setTotalDebtLimit"
      | "setWithdrawFee"
      | "supplyRate"
      | "supportsQuotas"
      | "symbol"
      | "totalAssets"
      | "totalBorrowed"
      | "totalDebtLimit"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "treasury"
      | "underlyingToken"
      | "unpause"
      | "updateBaseInterest"
      | "updateQuotaRevenue"
      | "version"
      | "withdraw"
      | "withdrawFee"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "availableLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseInterestIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseInterestIndexLU",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcBaseInterestAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcLinearCumulative_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcQuotaRevenueAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractsRegister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagerBorrowable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagerBorrowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagerDebtLimit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithReferral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "expectedLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectedLiquidityLU",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hackBaseInterestIndexLU",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hackBaseInterestRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hackCreditManagerBorrowed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hackExpectedLiquidityLU",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hackQuotaRevenue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hackReentrancyStatus",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "hackTotalBorrowed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hackTransferFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBaseInterestUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastQuotaRevenueUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendCreditAccount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRedeem",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdraw",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithReferral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolQuotaKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quotaRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditAccount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditManagerDebtLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateModel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolQuotaKeeper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuotaRevenue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalDebtLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsQuotas",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDebtLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBaseInterest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuotaRevenue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseInterestIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseInterestIndexLU",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBaseInterestAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcLinearCumulative_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcQuotaRevenueAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractsRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagerBorrowable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagerBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagerDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectedLiquidityLU",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hackBaseInterestIndexLU",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hackBaseInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hackCreditManagerBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hackExpectedLiquidityLU",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hackQuotaRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hackReentrancyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hackTotalBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hackTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBaseInterestUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastQuotaRevenueUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolQuotaKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotaRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditManagerDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolQuotaKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuotaRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supplyRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsQuotas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuotaRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "AddCreditManager(address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Borrow(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "IncurUncoveredLoss(address,uint256)": EventFragment;
    "NewController(address)": EventFragment;
    "Paused(address)": EventFragment;
    "Refer(address,uint256,uint256)": EventFragment;
    "Repay(address,uint256,uint256,uint256)": EventFragment;
    "SetCreditManagerDebtLimit(address,uint256)": EventFragment;
    "SetInterestRateModel(address)": EventFragment;
    "SetPoolQuotaKeeper(address)": EventFragment;
    "SetTotalDebtLimit(uint256)": EventFragment;
    "SetWithdrawFee(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCreditManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncurUncoveredLoss"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCreditManagerDebtLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInterestRateModel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPoolQuotaKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTotalDebtLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWithdrawFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AddCreditManagerEventObject {
  creditManager: string;
}
export type AddCreditManagerEvent = TypedEvent<
  [string],
  AddCreditManagerEventObject
>;

export type AddCreditManagerEventFilter =
  TypedEventFilter<AddCreditManagerEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BorrowEventObject {
  creditManager: string;
  creditAccount: string;
  amount: BigNumber;
}
export type BorrowEvent = TypedEvent<
  [string, string, BigNumber],
  BorrowEventObject
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface DepositEventObject {
  sender: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface IncurUncoveredLossEventObject {
  creditManager: string;
  loss: BigNumber;
}
export type IncurUncoveredLossEvent = TypedEvent<
  [string, BigNumber],
  IncurUncoveredLossEventObject
>;

export type IncurUncoveredLossEventFilter =
  TypedEventFilter<IncurUncoveredLossEvent>;

export interface NewControllerEventObject {
  newController: string;
}
export type NewControllerEvent = TypedEvent<[string], NewControllerEventObject>;

export type NewControllerEventFilter = TypedEventFilter<NewControllerEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReferEventObject {
  onBehalfOf: string;
  referralCode: BigNumber;
  amount: BigNumber;
}
export type ReferEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReferEventObject
>;

export type ReferEventFilter = TypedEventFilter<ReferEvent>;

export interface RepayEventObject {
  creditManager: string;
  borrowedAmount: BigNumber;
  profit: BigNumber;
  loss: BigNumber;
}
export type RepayEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RepayEventObject
>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface SetCreditManagerDebtLimitEventObject {
  creditManager: string;
  newLimit: BigNumber;
}
export type SetCreditManagerDebtLimitEvent = TypedEvent<
  [string, BigNumber],
  SetCreditManagerDebtLimitEventObject
>;

export type SetCreditManagerDebtLimitEventFilter =
  TypedEventFilter<SetCreditManagerDebtLimitEvent>;

export interface SetInterestRateModelEventObject {
  newInterestRateModel: string;
}
export type SetInterestRateModelEvent = TypedEvent<
  [string],
  SetInterestRateModelEventObject
>;

export type SetInterestRateModelEventFilter =
  TypedEventFilter<SetInterestRateModelEvent>;

export interface SetPoolQuotaKeeperEventObject {
  newPoolQuotaKeeper: string;
}
export type SetPoolQuotaKeeperEvent = TypedEvent<
  [string],
  SetPoolQuotaKeeperEventObject
>;

export type SetPoolQuotaKeeperEventFilter =
  TypedEventFilter<SetPoolQuotaKeeperEvent>;

export interface SetTotalDebtLimitEventObject {
  limit: BigNumber;
}
export type SetTotalDebtLimitEvent = TypedEvent<
  [BigNumber],
  SetTotalDebtLimitEventObject
>;

export type SetTotalDebtLimitEventFilter =
  TypedEventFilter<SetTotalDebtLimitEvent>;

export interface SetWithdrawFeeEventObject {
  fee: BigNumber;
}
export type SetWithdrawFeeEvent = TypedEvent<
  [BigNumber],
  SetWithdrawFeeEventObject
>;

export type SetWithdrawFeeEventFilter = TypedEventFilter<SetWithdrawFeeEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  sender: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface PoolV3Harness extends BaseContract {
  contractName: "PoolV3Harness";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolV3HarnessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acl(overrides?: CallOverrides): Promise<[string]>;

    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    availableLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseInterestIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseInterestIndexLU(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseInterestRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcBaseInterestAccrued(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcQuotaRevenueAccrued(overrides?: CallOverrides): Promise<[BigNumber]>;

    contractsRegister(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    creditManagerBorrowable(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { borrowable: BigNumber }>;

    creditManagerBorrowed(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditManagers(overrides?: CallOverrides): Promise<[string[]]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositWithReferral(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expectedLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    expectedLiquidityLU(overrides?: CallOverrides): Promise<[BigNumber]>;

    hackBaseInterestIndexLU(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hackBaseInterestRate(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hackCreditManagerBorrowed(
      creditManager: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hackExpectedLiquidityLU(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hackQuotaRevenue(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hackReentrancyStatus(
      entered: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hackTotalBorrowed(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hackTransferFee(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<[string]>;

    lastBaseInterestUpdate(overrides?: CallOverrides): Promise<[number]>;

    lastQuotaRevenueUpdate(overrides?: CallOverrides): Promise<[number]>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintWithReferral(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    poolQuotaKeeper(overrides?: CallOverrides): Promise<[string]>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quotaRevenue(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayCreditAccount(
      repaidAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInterestRateModel(
      newInterestRateModel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolQuotaKeeper(
      newPoolQuotaKeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuotaRevenue(
      newQuotaRevenue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTotalDebtLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      newWithdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supplyRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsQuotas(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    totalBorrowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebtLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBaseInterest(
      expectedLiquidityDelta: PromiseOrValue<BigNumberish>,
      availableLiquidityDelta: PromiseOrValue<BigNumberish>,
      checkOptimalBorrowing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateQuotaRevenue(
      quotaRevenueDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<[number]>;
  };

  acl(overrides?: CallOverrides): Promise<string>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  availableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseInterestIndex(overrides?: CallOverrides): Promise<BigNumber>;

  baseInterestIndexLU(overrides?: CallOverrides): Promise<BigNumber>;

  baseInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

  calcBaseInterestAccrued(overrides?: CallOverrides): Promise<BigNumber>;

  calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<BigNumber>;

  calcQuotaRevenueAccrued(overrides?: CallOverrides): Promise<BigNumber>;

  contractsRegister(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  convertToAssets(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditManagerBorrowable(
    creditManager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditManagerBorrowed(
    creditManager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditManagerDebtLimit(
    creditManager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditManagers(overrides?: CallOverrides): Promise<string[]>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositWithReferral(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expectedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  expectedLiquidityLU(overrides?: CallOverrides): Promise<BigNumber>;

  hackBaseInterestIndexLU(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hackBaseInterestRate(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hackCreditManagerBorrowed(
    creditManager: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hackExpectedLiquidityLU(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hackQuotaRevenue(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hackReentrancyStatus(
    entered: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hackTotalBorrowed(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hackTransferFee(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  interestRateModel(overrides?: CallOverrides): Promise<string>;

  lastBaseInterestUpdate(overrides?: CallOverrides): Promise<number>;

  lastQuotaRevenueUpdate(overrides?: CallOverrides): Promise<number>;

  lendCreditAccount(
    borrowedAmount: PromiseOrValue<BigNumberish>,
    creditAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxDeposit(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxMint(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxRedeem(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxWithdraw(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintWithReferral(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  poolQuotaKeeper(overrides?: CallOverrides): Promise<string>;

  previewDeposit(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quotaRevenue(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayCreditAccount(
    repaidAmount: PromiseOrValue<BigNumberish>,
    profit: PromiseOrValue<BigNumberish>,
    loss: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    newController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCreditManagerDebtLimit(
    creditManager: PromiseOrValue<string>,
    newLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInterestRateModel(
    newInterestRateModel: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolQuotaKeeper(
    newPoolQuotaKeeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuotaRevenue(
    newQuotaRevenue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTotalDebtLimit(
    newLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    newWithdrawFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supplyRate(overrides?: CallOverrides): Promise<BigNumber>;

  supportsQuotas(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebtLimit(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBaseInterest(
    expectedLiquidityDelta: PromiseOrValue<BigNumberish>,
    availableLiquidityDelta: PromiseOrValue<BigNumberish>,
    checkOptimalBorrowing: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateQuotaRevenue(
    quotaRevenueDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    acl(overrides?: CallOverrides): Promise<string>;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    availableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseInterestIndex(overrides?: CallOverrides): Promise<BigNumber>;

    baseInterestIndexLU(overrides?: CallOverrides): Promise<BigNumber>;

    baseInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    calcBaseInterestAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    calcQuotaRevenueAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    contractsRegister(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManagerBorrowable(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManagerBorrowed(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManagers(overrides?: CallOverrides): Promise<string[]>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositWithReferral(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expectedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    expectedLiquidityLU(overrides?: CallOverrides): Promise<BigNumber>;

    hackBaseInterestIndexLU(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hackBaseInterestRate(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hackCreditManagerBorrowed(
      creditManager: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hackExpectedLiquidityLU(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hackQuotaRevenue(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hackReentrancyStatus(
      entered: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    hackTotalBorrowed(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hackTransferFee(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    interestRateModel(overrides?: CallOverrides): Promise<string>;

    lastBaseInterestUpdate(overrides?: CallOverrides): Promise<number>;

    lastQuotaRevenueUpdate(overrides?: CallOverrides): Promise<number>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintWithReferral(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    poolQuotaKeeper(overrides?: CallOverrides): Promise<string>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotaRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayCreditAccount(
      repaidAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestRateModel(
      newInterestRateModel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolQuotaKeeper(
      newPoolQuotaKeeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuotaRevenue(
      newQuotaRevenue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalDebtLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFee(
      newWithdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyRate(overrides?: CallOverrides): Promise<BigNumber>;

    supportsQuotas(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtLimit(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    treasury(overrides?: CallOverrides): Promise<string>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateBaseInterest(
      expectedLiquidityDelta: PromiseOrValue<BigNumberish>,
      availableLiquidityDelta: PromiseOrValue<BigNumberish>,
      checkOptimalBorrowing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateQuotaRevenue(
      quotaRevenueDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "AddCreditManager(address)"(
      creditManager?: PromiseOrValue<string> | null
    ): AddCreditManagerEventFilter;
    AddCreditManager(
      creditManager?: PromiseOrValue<string> | null
    ): AddCreditManagerEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "Borrow(address,address,uint256)"(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      amount?: null
    ): BorrowEventFilter;
    Borrow(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      amount?: null
    ): BorrowEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    "IncurUncoveredLoss(address,uint256)"(
      creditManager?: PromiseOrValue<string> | null,
      loss?: null
    ): IncurUncoveredLossEventFilter;
    IncurUncoveredLoss(
      creditManager?: PromiseOrValue<string> | null,
      loss?: null
    ): IncurUncoveredLossEventFilter;

    "NewController(address)"(
      newController?: PromiseOrValue<string> | null
    ): NewControllerEventFilter;
    NewController(
      newController?: PromiseOrValue<string> | null
    ): NewControllerEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Refer(address,uint256,uint256)"(
      onBehalfOf?: PromiseOrValue<string> | null,
      referralCode?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ReferEventFilter;
    Refer(
      onBehalfOf?: PromiseOrValue<string> | null,
      referralCode?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ReferEventFilter;

    "Repay(address,uint256,uint256,uint256)"(
      creditManager?: PromiseOrValue<string> | null,
      borrowedAmount?: null,
      profit?: null,
      loss?: null
    ): RepayEventFilter;
    Repay(
      creditManager?: PromiseOrValue<string> | null,
      borrowedAmount?: null,
      profit?: null,
      loss?: null
    ): RepayEventFilter;

    "SetCreditManagerDebtLimit(address,uint256)"(
      creditManager?: PromiseOrValue<string> | null,
      newLimit?: null
    ): SetCreditManagerDebtLimitEventFilter;
    SetCreditManagerDebtLimit(
      creditManager?: PromiseOrValue<string> | null,
      newLimit?: null
    ): SetCreditManagerDebtLimitEventFilter;

    "SetInterestRateModel(address)"(
      newInterestRateModel?: PromiseOrValue<string> | null
    ): SetInterestRateModelEventFilter;
    SetInterestRateModel(
      newInterestRateModel?: PromiseOrValue<string> | null
    ): SetInterestRateModelEventFilter;

    "SetPoolQuotaKeeper(address)"(
      newPoolQuotaKeeper?: PromiseOrValue<string> | null
    ): SetPoolQuotaKeeperEventFilter;
    SetPoolQuotaKeeper(
      newPoolQuotaKeeper?: PromiseOrValue<string> | null
    ): SetPoolQuotaKeeperEventFilter;

    "SetTotalDebtLimit(uint256)"(limit?: null): SetTotalDebtLimitEventFilter;
    SetTotalDebtLimit(limit?: null): SetTotalDebtLimitEventFilter;

    "SetWithdrawFee(uint256)"(fee?: null): SetWithdrawFeeEventFilter;
    SetWithdrawFee(fee?: null): SetWithdrawFeeEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,address,address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    acl(overrides?: CallOverrides): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    availableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseInterestIndex(overrides?: CallOverrides): Promise<BigNumber>;

    baseInterestIndexLU(overrides?: CallOverrides): Promise<BigNumber>;

    baseInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    calcBaseInterestAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    calcLinearCumulative_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    calcQuotaRevenueAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    contractsRegister(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManagerBorrowable(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManagerBorrowed(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManagers(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositWithReferral(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expectedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    expectedLiquidityLU(overrides?: CallOverrides): Promise<BigNumber>;

    hackBaseInterestIndexLU(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hackBaseInterestRate(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hackCreditManagerBorrowed(
      creditManager: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hackExpectedLiquidityLU(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hackQuotaRevenue(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hackReentrancyStatus(
      entered: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hackTotalBorrowed(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hackTransferFee(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    lastBaseInterestUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    lastQuotaRevenueUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintWithReferral(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    poolQuotaKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotaRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayCreditAccount(
      repaidAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInterestRateModel(
      newInterestRateModel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolQuotaKeeper(
      newPoolQuotaKeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuotaRevenue(
      newQuotaRevenue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTotalDebtLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawFee(
      newWithdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supplyRate(overrides?: CallOverrides): Promise<BigNumber>;

    supportsQuotas(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtLimit(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBaseInterest(
      expectedLiquidityDelta: PromiseOrValue<BigNumberish>,
      availableLiquidityDelta: PromiseOrValue<BigNumberish>,
      checkOptimalBorrowing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateQuotaRevenue(
      quotaRevenueDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseInterestIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseInterestIndexLU(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseInterestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcBaseInterestAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcLinearCumulative_RAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcQuotaRevenueAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractsRegister(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditManagerBorrowable(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditManagerBorrowed(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditManagers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositWithReferral(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expectedLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expectedLiquidityLU(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hackBaseInterestIndexLU(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hackBaseInterestRate(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hackCreditManagerBorrowed(
      creditManager: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hackExpectedLiquidityLU(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hackQuotaRevenue(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hackReentrancyStatus(
      entered: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hackTotalBorrowed(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hackTransferFee(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBaseInterestUpdate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastQuotaRevenueUpdate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendCreditAccount(
      borrowedAmount: PromiseOrValue<BigNumberish>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintWithReferral(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolQuotaKeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotaRevenue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayCreditAccount(
      repaidAmount: PromiseOrValue<BigNumberish>,
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInterestRateModel(
      newInterestRateModel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolQuotaKeeper(
      newPoolQuotaKeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuotaRevenue(
      newQuotaRevenue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTotalDebtLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      newWithdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supplyRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsQuotas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebtLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBaseInterest(
      expectedLiquidityDelta: PromiseOrValue<BigNumberish>,
      availableLiquidityDelta: PromiseOrValue<BigNumberish>,
      checkOptimalBorrowing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateQuotaRevenue(
      quotaRevenueDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
