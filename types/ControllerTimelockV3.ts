/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type PolicyStruct = {
  enabled: PromiseOrValue<boolean>;
  admin: PromiseOrValue<string>;
  flags: PromiseOrValue<BigNumberish>;
  exactValue: PromiseOrValue<BigNumberish>;
  minValue: PromiseOrValue<BigNumberish>;
  maxValue: PromiseOrValue<BigNumberish>;
  referencePoint: PromiseOrValue<BigNumberish>;
  referencePointUpdatePeriod: PromiseOrValue<BigNumberish>;
  referencePointTimestampLU: PromiseOrValue<BigNumberish>;
  minPctChange: PromiseOrValue<BigNumberish>;
  maxPctChange: PromiseOrValue<BigNumberish>;
  minChange: PromiseOrValue<BigNumberish>;
  maxChange: PromiseOrValue<BigNumberish>;
};

export type PolicyStructOutput = [
  boolean,
  string,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber
] & {
  enabled: boolean;
  admin: string;
  flags: number;
  exactValue: BigNumber;
  minValue: BigNumber;
  maxValue: BigNumber;
  referencePoint: BigNumber;
  referencePointUpdatePeriod: number;
  referencePointTimestampLU: number;
  minPctChange: number;
  maxPctChange: number;
  minChange: BigNumber;
  maxChange: BigNumber;
};

export interface ControllerTimelockV3Interface extends utils.Interface {
  functions: {
    "CHECK_EXACT_VALUE_FLAG()": FunctionFragment;
    "CHECK_MAX_CHANGE_FLAG()": FunctionFragment;
    "CHECK_MAX_PCT_CHANGE_FLAG()": FunctionFragment;
    "CHECK_MAX_VALUE_FLAG()": FunctionFragment;
    "CHECK_MIN_CHANGE_FLAG()": FunctionFragment;
    "CHECK_MIN_PCT_CHANGE_FLAG()": FunctionFragment;
    "CHECK_MIN_VALUE_FLAG()": FunctionFragment;
    "GRACE_PERIOD()": FunctionFragment;
    "acl()": FunctionFragment;
    "cancelTransaction(bytes32)": FunctionFragment;
    "controller()": FunctionFragment;
    "delay()": FunctionFragment;
    "disablePolicy(bytes32)": FunctionFragment;
    "executeTransaction(bytes32)": FunctionFragment;
    "forbidAdapter(address,address)": FunctionFragment;
    "getGroup(address)": FunctionFragment;
    "getPolicy(bytes32)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "queuedTransactions(bytes32)": FunctionFragment;
    "rampLiquidationThreshold(address,address,uint16,uint40,uint24)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setCreditManagerDebtLimit(address,uint256)": FunctionFragment;
    "setDelay(uint256)": FunctionFragment;
    "setExpirationDate(address,uint40)": FunctionFragment;
    "setGroup(address,string)": FunctionFragment;
    "setLPPriceFeedLimiter(address,uint256)": FunctionFragment;
    "setMaxDebtLimit(address,uint128)": FunctionFragment;
    "setMaxDebtPerBlockMultiplier(address,uint8)": FunctionFragment;
    "setMaxQuotaRate(address,address,uint16)": FunctionFragment;
    "setMinDebtLimit(address,uint128)": FunctionFragment;
    "setMinQuotaRate(address,address,uint16)": FunctionFragment;
    "setPolicy(bytes32,(bool,address,uint8,uint256,uint256,uint256,uint256,uint40,uint40,uint16,uint16,uint256,uint256))": FunctionFragment;
    "setReservePriceFeedStatus(address,address,bool)": FunctionFragment;
    "setTokenLimit(address,address,uint96)": FunctionFragment;
    "setTokenQuotaIncreaseFee(address,address,uint16)": FunctionFragment;
    "setTotalDebtLimit(address,uint256)": FunctionFragment;
    "setVetoAdmin(address)": FunctionFragment;
    "setWithdrawFee(address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "version()": FunctionFragment;
    "vetoAdmin()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CHECK_EXACT_VALUE_FLAG"
      | "CHECK_MAX_CHANGE_FLAG"
      | "CHECK_MAX_PCT_CHANGE_FLAG"
      | "CHECK_MAX_VALUE_FLAG"
      | "CHECK_MIN_CHANGE_FLAG"
      | "CHECK_MIN_PCT_CHANGE_FLAG"
      | "CHECK_MIN_VALUE_FLAG"
      | "GRACE_PERIOD"
      | "acl"
      | "cancelTransaction"
      | "controller"
      | "delay"
      | "disablePolicy"
      | "executeTransaction"
      | "forbidAdapter"
      | "getGroup"
      | "getPolicy"
      | "pause"
      | "paused"
      | "queuedTransactions"
      | "rampLiquidationThreshold"
      | "setController"
      | "setCreditManagerDebtLimit"
      | "setDelay"
      | "setExpirationDate"
      | "setGroup"
      | "setLPPriceFeedLimiter"
      | "setMaxDebtLimit"
      | "setMaxDebtPerBlockMultiplier"
      | "setMaxQuotaRate"
      | "setMinDebtLimit"
      | "setMinQuotaRate"
      | "setPolicy"
      | "setReservePriceFeedStatus"
      | "setTokenLimit"
      | "setTokenQuotaIncreaseFee"
      | "setTotalDebtLimit"
      | "setVetoAdmin"
      | "setWithdrawFee"
      | "unpause"
      | "version"
      | "vetoAdmin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CHECK_EXACT_VALUE_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHECK_MAX_CHANGE_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHECK_MAX_PCT_CHANGE_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHECK_MAX_VALUE_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHECK_MIN_CHANGE_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHECK_MIN_PCT_CHANGE_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHECK_MIN_VALUE_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disablePolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "forbidAdapter",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroup",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queuedTransactions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "rampLiquidationThreshold",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditManagerDebtLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpirationDate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGroup",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPPriceFeedLimiter",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebtLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebtPerBlockMultiplier",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxQuotaRate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDebtLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinQuotaRate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPolicy",
    values: [PromiseOrValue<BytesLike>, PolicyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePriceFeedStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenLimit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenQuotaIncreaseFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalDebtLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVetoAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "vetoAdmin", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CHECK_EXACT_VALUE_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHECK_MAX_CHANGE_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHECK_MAX_PCT_CHANGE_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHECK_MAX_VALUE_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHECK_MIN_CHANGE_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHECK_MIN_PCT_CHANGE_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHECK_MIN_VALUE_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disablePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbidAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGroup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queuedTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rampLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditManagerDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGroup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLPPriceFeedLimiter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDebtPerBlockMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxQuotaRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinQuotaRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReservePriceFeedStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenQuotaIncreaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVetoAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vetoAdmin", data: BytesLike): Result;

  events: {
    "CancelTransaction(bytes32)": EventFragment;
    "ExecuteTransaction(bytes32)": EventFragment;
    "NewController(address)": EventFragment;
    "Paused(address)": EventFragment;
    "QueueTransaction(bytes32,address,address,string,bytes,uint40)": EventFragment;
    "SetDelay(uint256)": EventFragment;
    "SetGroup(address,string)": EventFragment;
    "SetPolicy(bytes32,bool)": EventFragment;
    "SetVetoAdmin(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueueTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGroup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPolicy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVetoAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface CancelTransactionEventObject {
  txHash: string;
}
export type CancelTransactionEvent = TypedEvent<
  [string],
  CancelTransactionEventObject
>;

export type CancelTransactionEventFilter =
  TypedEventFilter<CancelTransactionEvent>;

export interface ExecuteTransactionEventObject {
  txHash: string;
}
export type ExecuteTransactionEvent = TypedEvent<
  [string],
  ExecuteTransactionEventObject
>;

export type ExecuteTransactionEventFilter =
  TypedEventFilter<ExecuteTransactionEvent>;

export interface NewControllerEventObject {
  newController: string;
}
export type NewControllerEvent = TypedEvent<[string], NewControllerEventObject>;

export type NewControllerEventFilter = TypedEventFilter<NewControllerEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface QueueTransactionEventObject {
  txHash: string;
  executor: string;
  target: string;
  signature: string;
  data: string;
  eta: number;
}
export type QueueTransactionEvent = TypedEvent<
  [string, string, string, string, string, number],
  QueueTransactionEventObject
>;

export type QueueTransactionEventFilter =
  TypedEventFilter<QueueTransactionEvent>;

export interface SetDelayEventObject {
  newDelay: BigNumber;
}
export type SetDelayEvent = TypedEvent<[BigNumber], SetDelayEventObject>;

export type SetDelayEventFilter = TypedEventFilter<SetDelayEvent>;

export interface SetGroupEventObject {
  contractAddress: string;
  group: string;
}
export type SetGroupEvent = TypedEvent<[string, string], SetGroupEventObject>;

export type SetGroupEventFilter = TypedEventFilter<SetGroupEvent>;

export interface SetPolicyEventObject {
  policyHash: string;
  enabled: boolean;
}
export type SetPolicyEvent = TypedEvent<
  [string, boolean],
  SetPolicyEventObject
>;

export type SetPolicyEventFilter = TypedEventFilter<SetPolicyEvent>;

export interface SetVetoAdminEventObject {
  newAdmin: string;
}
export type SetVetoAdminEvent = TypedEvent<[string], SetVetoAdminEventObject>;

export type SetVetoAdminEventFilter = TypedEventFilter<SetVetoAdminEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ControllerTimelockV3 extends BaseContract {
  contractName: "ControllerTimelockV3";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerTimelockV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHECK_EXACT_VALUE_FLAG(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHECK_MAX_CHANGE_FLAG(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHECK_MAX_PCT_CHANGE_FLAG(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHECK_MAX_VALUE_FLAG(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHECK_MIN_CHANGE_FLAG(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHECK_MIN_PCT_CHANGE_FLAG(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHECK_MIN_VALUE_FLAG(overrides?: CallOverrides): Promise<[BigNumber]>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    acl(overrides?: CallOverrides): Promise<[string]>;

    cancelTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    disablePolicy(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forbidAdapter(
      creditManager: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getGroup(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPolicy(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[PolicyStructOutput]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    queuedTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, number, string, string] & {
        queued: boolean;
        executor: string;
        target: string;
        eta: number;
        signature: string;
        data: string;
      }
    >;

    rampLiquidationThreshold(
      creditManager: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationThresholdFinal: PromiseOrValue<BigNumberish>,
      rampStart: PromiseOrValue<BigNumberish>,
      rampDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      debtLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExpirationDate(
      creditManager: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGroup(
      contractAddress: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLPPriceFeedLimiter(
      priceFeed: PromiseOrValue<string>,
      lowerBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxDebtLimit(
      creditManager: PromiseOrValue<string>,
      maxDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxDebtPerBlockMultiplier(
      creditManager: PromiseOrValue<string>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinDebtLimit(
      creditManager: PromiseOrValue<string>,
      minDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPolicy(
      policyHash: PromiseOrValue<BytesLike>,
      initialPolicy: PolicyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservePriceFeedStatus(
      priceOracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenLimit(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenQuotaIncreaseFee(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      quotaIncreaseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTotalDebtLimit(
      pool: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVetoAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      pool: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    vetoAdmin(overrides?: CallOverrides): Promise<[string]>;
  };

  CHECK_EXACT_VALUE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

  CHECK_MAX_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

  CHECK_MAX_PCT_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

  CHECK_MAX_VALUE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

  CHECK_MIN_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

  CHECK_MIN_PCT_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

  CHECK_MIN_VALUE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

  GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  acl(overrides?: CallOverrides): Promise<string>;

  cancelTransaction(
    txHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  disablePolicy(
    policyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTransaction(
    txHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forbidAdapter(
    creditManager: PromiseOrValue<string>,
    adapter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getGroup(
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPolicy(
    policyHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PolicyStructOutput>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  queuedTransactions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, number, string, string] & {
      queued: boolean;
      executor: string;
      target: string;
      eta: number;
      signature: string;
      data: string;
    }
  >;

  rampLiquidationThreshold(
    creditManager: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    liquidationThresholdFinal: PromiseOrValue<BigNumberish>,
    rampStart: PromiseOrValue<BigNumberish>,
    rampDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    newController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCreditManagerDebtLimit(
    creditManager: PromiseOrValue<string>,
    debtLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelay(
    newDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExpirationDate(
    creditManager: PromiseOrValue<string>,
    expirationDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGroup(
    contractAddress: PromiseOrValue<string>,
    group: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLPPriceFeedLimiter(
    priceFeed: PromiseOrValue<string>,
    lowerBound: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxDebtLimit(
    creditManager: PromiseOrValue<string>,
    maxDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxDebtPerBlockMultiplier(
    creditManager: PromiseOrValue<string>,
    multiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxQuotaRate(
    pool: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinDebtLimit(
    creditManager: PromiseOrValue<string>,
    minDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinQuotaRate(
    pool: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPolicy(
    policyHash: PromiseOrValue<BytesLike>,
    initialPolicy: PolicyStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservePriceFeedStatus(
    priceOracle: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenLimit(
    pool: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenQuotaIncreaseFee(
    pool: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    quotaIncreaseFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTotalDebtLimit(
    pool: PromiseOrValue<string>,
    newLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVetoAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    pool: PromiseOrValue<string>,
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  vetoAdmin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CHECK_EXACT_VALUE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MAX_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MAX_PCT_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MAX_VALUE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MIN_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MIN_PCT_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MIN_VALUE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    acl(overrides?: CallOverrides): Promise<string>;

    cancelTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    disablePolicy(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    forbidAdapter(
      creditManager: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getGroup(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPolicy(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PolicyStructOutput>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    queuedTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, number, string, string] & {
        queued: boolean;
        executor: string;
        target: string;
        eta: number;
        signature: string;
        data: string;
      }
    >;

    rampLiquidationThreshold(
      creditManager: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationThresholdFinal: PromiseOrValue<BigNumberish>,
      rampStart: PromiseOrValue<BigNumberish>,
      rampDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      debtLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpirationDate(
      creditManager: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGroup(
      contractAddress: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPPriceFeedLimiter(
      priceFeed: PromiseOrValue<string>,
      lowerBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDebtLimit(
      creditManager: PromiseOrValue<string>,
      maxDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDebtPerBlockMultiplier(
      creditManager: PromiseOrValue<string>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinDebtLimit(
      creditManager: PromiseOrValue<string>,
      minDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPolicy(
      policyHash: PromiseOrValue<BytesLike>,
      initialPolicy: PolicyStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservePriceFeedStatus(
      priceOracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenLimit(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenQuotaIncreaseFee(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      quotaIncreaseFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalDebtLimit(
      pool: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVetoAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFee(
      pool: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    vetoAdmin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CancelTransaction(bytes32)"(
      txHash?: PromiseOrValue<BytesLike> | null
    ): CancelTransactionEventFilter;
    CancelTransaction(
      txHash?: PromiseOrValue<BytesLike> | null
    ): CancelTransactionEventFilter;

    "ExecuteTransaction(bytes32)"(
      txHash?: PromiseOrValue<BytesLike> | null
    ): ExecuteTransactionEventFilter;
    ExecuteTransaction(
      txHash?: PromiseOrValue<BytesLike> | null
    ): ExecuteTransactionEventFilter;

    "NewController(address)"(
      newController?: PromiseOrValue<string> | null
    ): NewControllerEventFilter;
    NewController(
      newController?: PromiseOrValue<string> | null
    ): NewControllerEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "QueueTransaction(bytes32,address,address,string,bytes,uint40)"(
      txHash?: PromiseOrValue<BytesLike> | null,
      executor?: PromiseOrValue<string> | null,
      target?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): QueueTransactionEventFilter;
    QueueTransaction(
      txHash?: PromiseOrValue<BytesLike> | null,
      executor?: PromiseOrValue<string> | null,
      target?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): QueueTransactionEventFilter;

    "SetDelay(uint256)"(newDelay?: null): SetDelayEventFilter;
    SetDelay(newDelay?: null): SetDelayEventFilter;

    "SetGroup(address,string)"(
      contractAddress?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<string> | null
    ): SetGroupEventFilter;
    SetGroup(
      contractAddress?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<string> | null
    ): SetGroupEventFilter;

    "SetPolicy(bytes32,bool)"(
      policyHash?: PromiseOrValue<BytesLike> | null,
      enabled?: null
    ): SetPolicyEventFilter;
    SetPolicy(
      policyHash?: PromiseOrValue<BytesLike> | null,
      enabled?: null
    ): SetPolicyEventFilter;

    "SetVetoAdmin(address)"(
      newAdmin?: PromiseOrValue<string> | null
    ): SetVetoAdminEventFilter;
    SetVetoAdmin(
      newAdmin?: PromiseOrValue<string> | null
    ): SetVetoAdminEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    CHECK_EXACT_VALUE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MAX_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MAX_PCT_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MAX_VALUE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MIN_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MIN_PCT_CHANGE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CHECK_MIN_VALUE_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    acl(overrides?: CallOverrides): Promise<BigNumber>;

    cancelTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    disablePolicy(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forbidAdapter(
      creditManager: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getGroup(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicy(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    queuedTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rampLiquidationThreshold(
      creditManager: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationThresholdFinal: PromiseOrValue<BigNumberish>,
      rampStart: PromiseOrValue<BigNumberish>,
      rampDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      debtLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExpirationDate(
      creditManager: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGroup(
      contractAddress: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLPPriceFeedLimiter(
      priceFeed: PromiseOrValue<string>,
      lowerBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxDebtLimit(
      creditManager: PromiseOrValue<string>,
      maxDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxDebtPerBlockMultiplier(
      creditManager: PromiseOrValue<string>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinDebtLimit(
      creditManager: PromiseOrValue<string>,
      minDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPolicy(
      policyHash: PromiseOrValue<BytesLike>,
      initialPolicy: PolicyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservePriceFeedStatus(
      priceOracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenLimit(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenQuotaIncreaseFee(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      quotaIncreaseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTotalDebtLimit(
      pool: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVetoAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawFee(
      pool: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    vetoAdmin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CHECK_EXACT_VALUE_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHECK_MAX_CHANGE_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHECK_MAX_PCT_CHANGE_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHECK_MAX_VALUE_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHECK_MIN_CHANGE_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHECK_MIN_PCT_CHANGE_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHECK_MIN_VALUE_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disablePolicy(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forbidAdapter(
      creditManager: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getGroup(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicy(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queuedTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rampLiquidationThreshold(
      creditManager: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationThresholdFinal: PromiseOrValue<BigNumberish>,
      rampStart: PromiseOrValue<BigNumberish>,
      rampDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      debtLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExpirationDate(
      creditManager: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGroup(
      contractAddress: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLPPriceFeedLimiter(
      priceFeed: PromiseOrValue<string>,
      lowerBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDebtLimit(
      creditManager: PromiseOrValue<string>,
      maxDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDebtPerBlockMultiplier(
      creditManager: PromiseOrValue<string>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinDebtLimit(
      creditManager: PromiseOrValue<string>,
      minDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPolicy(
      policyHash: PromiseOrValue<BytesLike>,
      initialPolicy: PolicyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservePriceFeedStatus(
      priceOracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenLimit(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenQuotaIncreaseFee(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      quotaIncreaseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTotalDebtLimit(
      pool: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVetoAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      pool: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vetoAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
