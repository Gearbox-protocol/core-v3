/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CreditAccountMockEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "ExecuteCall(address,bytes)": EventFragment;
    "TransferCall(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferCall"): EventFragment;
}

export interface ExecuteCallEventObject {
  destination: string;
  data: string;
}
export type ExecuteCallEvent = TypedEvent<
  [string, string],
  ExecuteCallEventObject
>;

export type ExecuteCallEventFilter = TypedEventFilter<ExecuteCallEvent>;

export interface TransferCallEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type TransferCallEvent = TypedEvent<
  [string, string, BigNumber],
  TransferCallEventObject
>;

export type TransferCallEventFilter = TypedEventFilter<TransferCallEvent>;

export interface CreditAccountMockEvents extends BaseContract {
  contractName: "CreditAccountMockEvents";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditAccountMockEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ExecuteCall(address,bytes)"(
      destination?: null,
      data?: null
    ): ExecuteCallEventFilter;
    ExecuteCall(destination?: null, data?: null): ExecuteCallEventFilter;

    "TransferCall(address,address,uint256)"(
      token?: null,
      to?: null,
      amount?: null
    ): TransferCallEventFilter;
    TransferCall(
      token?: null,
      to?: null,
      amount?: null
    ): TransferCallEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
