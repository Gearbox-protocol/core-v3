/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CreditAccountMockInterface extends utils.Interface {
  functions: {
    "creditManager()": FunctionFragment;
    "execute(address,bytes)": FunctionFragment;
    "return_executeResult()": FunctionFragment;
    "revertsOnTransfer(address,address)": FunctionFragment;
    "safeTransfer(address,address,uint256)": FunctionFragment;
    "setReturnExecuteResult(bytes)": FunctionFragment;
    "setRevertOnTransfer(address,address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "creditManager"
      | "execute"
      | "return_executeResult"
      | "revertsOnTransfer"
      | "safeTransfer"
      | "setReturnExecuteResult"
      | "setRevertOnTransfer"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "return_executeResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertsOnTransfer",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setReturnExecuteResult",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevertOnTransfer",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "return_executeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertsOnTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReturnExecuteResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevertOnTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "ExecuteCall(address,bytes)": EventFragment;
    "TransferCall(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferCall"): EventFragment;
}

export interface ExecuteCallEventObject {
  destination: string;
  data: string;
}
export type ExecuteCallEvent = TypedEvent<
  [string, string],
  ExecuteCallEventObject
>;

export type ExecuteCallEventFilter = TypedEventFilter<ExecuteCallEvent>;

export interface TransferCallEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type TransferCallEvent = TypedEvent<
  [string, string, BigNumber],
  TransferCallEventObject
>;

export type TransferCallEventFilter = TypedEventFilter<TransferCallEvent>;

export interface CreditAccountMock extends BaseContract {
  contractName: "CreditAccountMock";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditAccountMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    creditManager(overrides?: CallOverrides): Promise<[string]>;

    execute(
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    return_executeResult(overrides?: CallOverrides): Promise<[string]>;

    revertsOnTransfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    safeTransfer(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReturnExecuteResult(
      _result: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRevertOnTransfer(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  creditManager(overrides?: CallOverrides): Promise<string>;

  execute(
    destination: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  return_executeResult(overrides?: CallOverrides): Promise<string>;

  revertsOnTransfer(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  safeTransfer(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReturnExecuteResult(
    _result: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRevertOnTransfer(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    creditManager(overrides?: CallOverrides): Promise<string>;

    execute(
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    return_executeResult(overrides?: CallOverrides): Promise<string>;

    revertsOnTransfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    safeTransfer(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReturnExecuteResult(
      _result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevertOnTransfer(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ExecuteCall(address,bytes)"(
      destination?: null,
      data?: null
    ): ExecuteCallEventFilter;
    ExecuteCall(destination?: null, data?: null): ExecuteCallEventFilter;

    "TransferCall(address,address,uint256)"(
      token?: null,
      to?: null,
      amount?: null
    ): TransferCallEventFilter;
    TransferCall(
      token?: null,
      to?: null,
      amount?: null
    ): TransferCallEventFilter;
  };

  estimateGas: {
    creditManager(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    return_executeResult(overrides?: CallOverrides): Promise<BigNumber>;

    revertsOnTransfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeTransfer(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReturnExecuteResult(
      _result: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRevertOnTransfer(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    creditManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      destination: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    return_executeResult(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertsOnTransfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeTransfer(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReturnExecuteResult(
      _result: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRevertOnTransfer(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
