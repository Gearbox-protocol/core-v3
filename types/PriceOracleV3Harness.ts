/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type PriceFeedParamsStruct = {
  priceFeed: PromiseOrValue<string>;
  stalenessPeriod: PromiseOrValue<BigNumberish>;
  skipCheck: PromiseOrValue<boolean>;
  decimals: PromiseOrValue<BigNumberish>;
  useReserve: PromiseOrValue<boolean>;
};

export type PriceFeedParamsStructOutput = [
  string,
  number,
  boolean,
  number,
  boolean
] & {
  priceFeed: string;
  stalenessPeriod: number;
  skipCheck: boolean;
  decimals: number;
  useReserve: boolean;
};

export interface PriceOracleV3HarnessInterface extends utils.Interface {
  functions: {
    "acl()": FunctionFragment;
    "controller()": FunctionFragment;
    "convert(uint256,address,address)": FunctionFragment;
    "convertFromUSD(uint256,address)": FunctionFragment;
    "convertToUSD(uint256,address)": FunctionFragment;
    "getPrice(address,uint32,bool,uint8)": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "getPriceFeedParams(address)": FunctionFragment;
    "getPriceRaw(address,bool)": FunctionFragment;
    "getReservePriceFeedParams(address)": FunctionFragment;
    "getTokenReserveKey(address)": FunctionFragment;
    "hackPriceFeedParams(address,(address,uint32,bool,uint8,bool))": FunctionFragment;
    "hackReservePriceFeedParams(address,(address,uint32,bool,uint8,bool))": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "priceFeedParams(address)": FunctionFragment;
    "priceFeeds(address)": FunctionFragment;
    "priceFeedsRaw(address,bool)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setPriceFeed(address,address,uint32)": FunctionFragment;
    "setReservePriceFeed(address,address,uint32)": FunctionFragment;
    "setReservePriceFeedStatus(address,bool)": FunctionFragment;
    "unpause()": FunctionFragment;
    "validatePriceFeed(address,uint32)": FunctionFragment;
    "validateToken(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acl"
      | "controller"
      | "convert"
      | "convertFromUSD"
      | "convertToUSD"
      | "getPrice(address,uint32,bool,uint8)"
      | "getPrice(address)"
      | "getPriceFeedParams"
      | "getPriceRaw"
      | "getReservePriceFeedParams"
      | "getTokenReserveKey"
      | "hackPriceFeedParams"
      | "hackReservePriceFeedParams"
      | "pause"
      | "paused"
      | "priceFeedParams"
      | "priceFeeds"
      | "priceFeedsRaw"
      | "setController"
      | "setPriceFeed"
      | "setReservePriceFeed"
      | "setReservePriceFeedStatus"
      | "unpause"
      | "validatePriceFeed"
      | "validateToken"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertFromUSD",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToUSD",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice(address,uint32,bool,uint8)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeedParams",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceRaw",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservePriceFeedParams",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenReserveKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hackPriceFeedParams",
    values: [PromiseOrValue<string>, PriceFeedParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hackReservePriceFeedParams",
    values: [PromiseOrValue<string>, PriceFeedParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeedParams",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedsRaw",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePriceFeed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePriceFeedStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validatePriceFeed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertFromUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrice(address,uint32,bool,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrice(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeedParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservePriceFeedParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenReserveKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hackPriceFeedParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hackReservePriceFeedParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedsRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePriceFeedStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "NewController(address)": EventFragment;
    "Paused(address)": EventFragment;
    "SetPriceFeed(address,address,uint32,bool)": EventFragment;
    "SetReservePriceFeed(address,address,uint32,bool)": EventFragment;
    "SetReservePriceFeedStatus(address,bool)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReservePriceFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReservePriceFeedStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface NewControllerEventObject {
  newController: string;
}
export type NewControllerEvent = TypedEvent<[string], NewControllerEventObject>;

export type NewControllerEventFilter = TypedEventFilter<NewControllerEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SetPriceFeedEventObject {
  token: string;
  priceFeed: string;
  stalenessPeriod: number;
  skipCheck: boolean;
}
export type SetPriceFeedEvent = TypedEvent<
  [string, string, number, boolean],
  SetPriceFeedEventObject
>;

export type SetPriceFeedEventFilter = TypedEventFilter<SetPriceFeedEvent>;

export interface SetReservePriceFeedEventObject {
  token: string;
  priceFeed: string;
  stalenessPeriod: number;
  skipCheck: boolean;
}
export type SetReservePriceFeedEvent = TypedEvent<
  [string, string, number, boolean],
  SetReservePriceFeedEventObject
>;

export type SetReservePriceFeedEventFilter =
  TypedEventFilter<SetReservePriceFeedEvent>;

export interface SetReservePriceFeedStatusEventObject {
  token: string;
  active: boolean;
}
export type SetReservePriceFeedStatusEvent = TypedEvent<
  [string, boolean],
  SetReservePriceFeedStatusEventObject
>;

export type SetReservePriceFeedStatusEventFilter =
  TypedEventFilter<SetReservePriceFeedStatusEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface PriceOracleV3Harness extends BaseContract {
  contractName: "PriceOracleV3Harness";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceOracleV3HarnessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acl(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    convert(
      amount: PromiseOrValue<BigNumberish>,
      tokenFrom: PromiseOrValue<string>,
      tokenTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertFromUSD(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertToUSD(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPrice(address,uint32,bool,uint8)"(
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      skipCheck: PromiseOrValue<boolean>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; scale: BigNumber }>;

    "getPrice(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getPriceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[PriceFeedParamsStructOutput]>;

    getPriceRaw(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getReservePriceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[PriceFeedParamsStructOutput]>;

    getTokenReserveKey(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hackPriceFeedParams(
      token: PromiseOrValue<string>,
      params: PriceFeedParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hackReservePriceFeedParams(
      token: PromiseOrValue<string>,
      params: PriceFeedParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    priceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, number] & {
        priceFeed: string;
        stalenessPeriod: number;
        skipCheck: boolean;
        decimals: number;
      }
    >;

    priceFeeds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { priceFeed: string }>;

    priceFeedsRaw(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string] & { priceFeed: string }>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservePriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservePriceFeedStatus(
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validatePriceFeed(
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { skipCheck: boolean }>;

    validateToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { decimals: number }>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  acl(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  convert(
    amount: PromiseOrValue<BigNumberish>,
    tokenFrom: PromiseOrValue<string>,
    tokenTo: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertFromUSD(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToUSD(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPrice(address,uint32,bool,uint8)"(
    priceFeed: PromiseOrValue<string>,
    stalenessPeriod: PromiseOrValue<BigNumberish>,
    skipCheck: PromiseOrValue<boolean>,
    decimals: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { price: BigNumber; scale: BigNumber }>;

  "getPrice(address)"(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceFeedParams(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PriceFeedParamsStructOutput>;

  getPriceRaw(
    token: PromiseOrValue<string>,
    reserve: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReservePriceFeedParams(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PriceFeedParamsStructOutput>;

  getTokenReserveKey(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  hackPriceFeedParams(
    token: PromiseOrValue<string>,
    params: PriceFeedParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hackReservePriceFeedParams(
    token: PromiseOrValue<string>,
    params: PriceFeedParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  priceFeedParams(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, boolean, number] & {
      priceFeed: string;
      stalenessPeriod: number;
      skipCheck: boolean;
      decimals: number;
    }
  >;

  priceFeeds(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  priceFeedsRaw(
    token: PromiseOrValue<string>,
    reserve: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  setController(
    newController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    token: PromiseOrValue<string>,
    priceFeed: PromiseOrValue<string>,
    stalenessPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservePriceFeed(
    token: PromiseOrValue<string>,
    priceFeed: PromiseOrValue<string>,
    stalenessPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservePriceFeedStatus(
    token: PromiseOrValue<string>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validatePriceFeed(
    priceFeed: PromiseOrValue<string>,
    stalenessPeriod: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acl(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    convert(
      amount: PromiseOrValue<BigNumberish>,
      tokenFrom: PromiseOrValue<string>,
      tokenTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertFromUSD(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToUSD(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(address,uint32,bool,uint8)"(
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      skipCheck: PromiseOrValue<boolean>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; scale: BigNumber }>;

    "getPrice(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PriceFeedParamsStructOutput>;

    getPriceRaw(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservePriceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PriceFeedParamsStructOutput>;

    getTokenReserveKey(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    hackPriceFeedParams(
      token: PromiseOrValue<string>,
      params: PriceFeedParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    hackReservePriceFeedParams(
      token: PromiseOrValue<string>,
      params: PriceFeedParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    priceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, number] & {
        priceFeed: string;
        stalenessPeriod: number;
        skipCheck: boolean;
        decimals: number;
      }
    >;

    priceFeeds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    priceFeedsRaw(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservePriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservePriceFeedStatus(
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    validatePriceFeed(
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "NewController(address)"(
      newController?: PromiseOrValue<string> | null
    ): NewControllerEventFilter;
    NewController(
      newController?: PromiseOrValue<string> | null
    ): NewControllerEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SetPriceFeed(address,address,uint32,bool)"(
      token?: PromiseOrValue<string> | null,
      priceFeed?: PromiseOrValue<string> | null,
      stalenessPeriod?: null,
      skipCheck?: null
    ): SetPriceFeedEventFilter;
    SetPriceFeed(
      token?: PromiseOrValue<string> | null,
      priceFeed?: PromiseOrValue<string> | null,
      stalenessPeriod?: null,
      skipCheck?: null
    ): SetPriceFeedEventFilter;

    "SetReservePriceFeed(address,address,uint32,bool)"(
      token?: PromiseOrValue<string> | null,
      priceFeed?: PromiseOrValue<string> | null,
      stalenessPeriod?: null,
      skipCheck?: null
    ): SetReservePriceFeedEventFilter;
    SetReservePriceFeed(
      token?: PromiseOrValue<string> | null,
      priceFeed?: PromiseOrValue<string> | null,
      stalenessPeriod?: null,
      skipCheck?: null
    ): SetReservePriceFeedEventFilter;

    "SetReservePriceFeedStatus(address,bool)"(
      token?: PromiseOrValue<string> | null,
      active?: null
    ): SetReservePriceFeedStatusEventFilter;
    SetReservePriceFeedStatus(
      token?: PromiseOrValue<string> | null,
      active?: null
    ): SetReservePriceFeedStatusEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    acl(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    convert(
      amount: PromiseOrValue<BigNumberish>,
      tokenFrom: PromiseOrValue<string>,
      tokenTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertFromUSD(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToUSD(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(address,uint32,bool,uint8)"(
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      skipCheck: PromiseOrValue<boolean>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceRaw(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservePriceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenReserveKey(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hackPriceFeedParams(
      token: PromiseOrValue<string>,
      params: PriceFeedParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hackReservePriceFeedParams(
      token: PromiseOrValue<string>,
      params: PriceFeedParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeeds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedsRaw(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservePriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservePriceFeedStatus(
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validatePriceFeed(
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convert(
      amount: PromiseOrValue<BigNumberish>,
      tokenFrom: PromiseOrValue<string>,
      tokenTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertFromUSD(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToUSD(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(address,uint32,bool,uint8)"(
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      skipCheck: PromiseOrValue<boolean>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(address)"(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceRaw(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservePriceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenReserveKey(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hackPriceFeedParams(
      token: PromiseOrValue<string>,
      params: PriceFeedParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hackReservePriceFeedParams(
      token: PromiseOrValue<string>,
      params: PriceFeedParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeedParams(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeeds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeedsRaw(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservePriceFeed(
      token: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservePriceFeedStatus(
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validatePriceFeed(
      priceFeed: PromiseOrValue<string>,
      stalenessPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
