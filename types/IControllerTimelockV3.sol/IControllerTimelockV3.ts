/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IControllerTimelockV3Interface extends utils.Interface {
  functions: {
    "GRACE_PERIOD()": FunctionFragment;
    "cancelTransaction(bytes32)": FunctionFragment;
    "delay()": FunctionFragment;
    "executeTransaction(bytes32)": FunctionFragment;
    "forbidAdapter(address,address)": FunctionFragment;
    "queuedTransactions(bytes32)": FunctionFragment;
    "rampLiquidationThreshold(address,address,uint16,uint40,uint24)": FunctionFragment;
    "setCreditManagerDebtLimit(address,uint256)": FunctionFragment;
    "setDelay(uint256)": FunctionFragment;
    "setExpirationDate(address,uint40)": FunctionFragment;
    "setLPPriceFeedLimiter(address,uint256)": FunctionFragment;
    "setMaxDebtLimit(address,uint128)": FunctionFragment;
    "setMaxDebtPerBlockMultiplier(address,uint8)": FunctionFragment;
    "setMaxQuotaRate(address,address,uint16)": FunctionFragment;
    "setMinDebtLimit(address,uint128)": FunctionFragment;
    "setMinQuotaRate(address,address,uint16)": FunctionFragment;
    "setReservePriceFeedStatus(address,address,bool)": FunctionFragment;
    "setTokenLimit(address,address,uint96)": FunctionFragment;
    "setTokenQuotaIncreaseFee(address,address,uint16)": FunctionFragment;
    "setTotalDebtLimit(address,uint256)": FunctionFragment;
    "setVetoAdmin(address)": FunctionFragment;
    "setWithdrawFee(address,uint256)": FunctionFragment;
    "version()": FunctionFragment;
    "vetoAdmin()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GRACE_PERIOD"
      | "cancelTransaction"
      | "delay"
      | "executeTransaction"
      | "forbidAdapter"
      | "queuedTransactions"
      | "rampLiquidationThreshold"
      | "setCreditManagerDebtLimit"
      | "setDelay"
      | "setExpirationDate"
      | "setLPPriceFeedLimiter"
      | "setMaxDebtLimit"
      | "setMaxDebtPerBlockMultiplier"
      | "setMaxQuotaRate"
      | "setMinDebtLimit"
      | "setMinQuotaRate"
      | "setReservePriceFeedStatus"
      | "setTokenLimit"
      | "setTokenQuotaIncreaseFee"
      | "setTotalDebtLimit"
      | "setVetoAdmin"
      | "setWithdrawFee"
      | "version"
      | "vetoAdmin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "forbidAdapter",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedTransactions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "rampLiquidationThreshold",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditManagerDebtLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpirationDate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPPriceFeedLimiter",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebtLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebtPerBlockMultiplier",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxQuotaRate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDebtLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinQuotaRate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePriceFeedStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenLimit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenQuotaIncreaseFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalDebtLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVetoAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "vetoAdmin", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbidAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rampLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditManagerDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPPriceFeedLimiter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDebtPerBlockMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxQuotaRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinQuotaRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePriceFeedStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenQuotaIncreaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalDebtLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVetoAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vetoAdmin", data: BytesLike): Result;

  events: {
    "CancelTransaction(bytes32)": EventFragment;
    "ExecuteTransaction(bytes32)": EventFragment;
    "QueueTransaction(bytes32,address,address,string,bytes,uint40)": EventFragment;
    "SetDelay(uint256)": EventFragment;
    "SetVetoAdmin(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueueTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVetoAdmin"): EventFragment;
}

export interface CancelTransactionEventObject {
  txHash: string;
}
export type CancelTransactionEvent = TypedEvent<
  [string],
  CancelTransactionEventObject
>;

export type CancelTransactionEventFilter =
  TypedEventFilter<CancelTransactionEvent>;

export interface ExecuteTransactionEventObject {
  txHash: string;
}
export type ExecuteTransactionEvent = TypedEvent<
  [string],
  ExecuteTransactionEventObject
>;

export type ExecuteTransactionEventFilter =
  TypedEventFilter<ExecuteTransactionEvent>;

export interface QueueTransactionEventObject {
  txHash: string;
  executor: string;
  target: string;
  signature: string;
  data: string;
  eta: number;
}
export type QueueTransactionEvent = TypedEvent<
  [string, string, string, string, string, number],
  QueueTransactionEventObject
>;

export type QueueTransactionEventFilter =
  TypedEventFilter<QueueTransactionEvent>;

export interface SetDelayEventObject {
  newDelay: BigNumber;
}
export type SetDelayEvent = TypedEvent<[BigNumber], SetDelayEventObject>;

export type SetDelayEventFilter = TypedEventFilter<SetDelayEvent>;

export interface SetVetoAdminEventObject {
  newAdmin: string;
}
export type SetVetoAdminEvent = TypedEvent<[string], SetVetoAdminEventObject>;

export type SetVetoAdminEventFilter = TypedEventFilter<SetVetoAdminEvent>;

export interface IControllerTimelockV3 extends BaseContract {
  contractName: "IControllerTimelockV3";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IControllerTimelockV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forbidAdapter(
      creditManager: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queuedTransactions(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, number, string, string] & {
        queued: boolean;
        executor: string;
        target: string;
        eta: number;
        signature: string;
        data: string;
      }
    >;

    rampLiquidationThreshold(
      creditManager: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationThresholdFinal: PromiseOrValue<BigNumberish>,
      rampStart: PromiseOrValue<BigNumberish>,
      rampDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      debtLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExpirationDate(
      creditManager: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLPPriceFeedLimiter(
      priceFeed: PromiseOrValue<string>,
      lowerBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxDebtLimit(
      creditManager: PromiseOrValue<string>,
      maxDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxDebtPerBlockMultiplier(
      creditManager: PromiseOrValue<string>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinDebtLimit(
      creditManager: PromiseOrValue<string>,
      minDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservePriceFeedStatus(
      priceOracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenLimit(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenQuotaIncreaseFee(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      quotaIncreaseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTotalDebtLimit(
      pool: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVetoAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      pool: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    vetoAdmin(overrides?: CallOverrides): Promise<[string]>;
  };

  GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  cancelTransaction(
    txHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  executeTransaction(
    txHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forbidAdapter(
    creditManager: PromiseOrValue<string>,
    adapter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queuedTransactions(
    txHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, number, string, string] & {
      queued: boolean;
      executor: string;
      target: string;
      eta: number;
      signature: string;
      data: string;
    }
  >;

  rampLiquidationThreshold(
    creditManager: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    liquidationThresholdFinal: PromiseOrValue<BigNumberish>,
    rampStart: PromiseOrValue<BigNumberish>,
    rampDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCreditManagerDebtLimit(
    creditManager: PromiseOrValue<string>,
    debtLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelay(
    newDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExpirationDate(
    creditManager: PromiseOrValue<string>,
    expirationDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLPPriceFeedLimiter(
    priceFeed: PromiseOrValue<string>,
    lowerBound: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxDebtLimit(
    creditManager: PromiseOrValue<string>,
    maxDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxDebtPerBlockMultiplier(
    creditManager: PromiseOrValue<string>,
    multiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxQuotaRate(
    pool: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinDebtLimit(
    creditManager: PromiseOrValue<string>,
    minDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinQuotaRate(
    pool: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservePriceFeedStatus(
    priceOracle: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenLimit(
    pool: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenQuotaIncreaseFee(
    pool: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    quotaIncreaseFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTotalDebtLimit(
    pool: PromiseOrValue<string>,
    newLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVetoAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    pool: PromiseOrValue<string>,
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  vetoAdmin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    cancelTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    forbidAdapter(
      creditManager: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    queuedTransactions(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, number, string, string] & {
        queued: boolean;
        executor: string;
        target: string;
        eta: number;
        signature: string;
        data: string;
      }
    >;

    rampLiquidationThreshold(
      creditManager: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationThresholdFinal: PromiseOrValue<BigNumberish>,
      rampStart: PromiseOrValue<BigNumberish>,
      rampDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      debtLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpirationDate(
      creditManager: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPPriceFeedLimiter(
      priceFeed: PromiseOrValue<string>,
      lowerBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDebtLimit(
      creditManager: PromiseOrValue<string>,
      maxDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDebtPerBlockMultiplier(
      creditManager: PromiseOrValue<string>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinDebtLimit(
      creditManager: PromiseOrValue<string>,
      minDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservePriceFeedStatus(
      priceOracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenLimit(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenQuotaIncreaseFee(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      quotaIncreaseFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalDebtLimit(
      pool: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVetoAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFee(
      pool: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    vetoAdmin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CancelTransaction(bytes32)"(
      txHash?: PromiseOrValue<BytesLike> | null
    ): CancelTransactionEventFilter;
    CancelTransaction(
      txHash?: PromiseOrValue<BytesLike> | null
    ): CancelTransactionEventFilter;

    "ExecuteTransaction(bytes32)"(
      txHash?: PromiseOrValue<BytesLike> | null
    ): ExecuteTransactionEventFilter;
    ExecuteTransaction(
      txHash?: PromiseOrValue<BytesLike> | null
    ): ExecuteTransactionEventFilter;

    "QueueTransaction(bytes32,address,address,string,bytes,uint40)"(
      txHash?: PromiseOrValue<BytesLike> | null,
      executor?: PromiseOrValue<string> | null,
      target?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): QueueTransactionEventFilter;
    QueueTransaction(
      txHash?: PromiseOrValue<BytesLike> | null,
      executor?: PromiseOrValue<string> | null,
      target?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): QueueTransactionEventFilter;

    "SetDelay(uint256)"(newDelay?: null): SetDelayEventFilter;
    SetDelay(newDelay?: null): SetDelayEventFilter;

    "SetVetoAdmin(address)"(
      newAdmin?: PromiseOrValue<string> | null
    ): SetVetoAdminEventFilter;
    SetVetoAdmin(
      newAdmin?: PromiseOrValue<string> | null
    ): SetVetoAdminEventFilter;
  };

  estimateGas: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    cancelTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forbidAdapter(
      creditManager: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queuedTransactions(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rampLiquidationThreshold(
      creditManager: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationThresholdFinal: PromiseOrValue<BigNumberish>,
      rampStart: PromiseOrValue<BigNumberish>,
      rampDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      debtLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExpirationDate(
      creditManager: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLPPriceFeedLimiter(
      priceFeed: PromiseOrValue<string>,
      lowerBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxDebtLimit(
      creditManager: PromiseOrValue<string>,
      maxDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxDebtPerBlockMultiplier(
      creditManager: PromiseOrValue<string>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinDebtLimit(
      creditManager: PromiseOrValue<string>,
      minDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservePriceFeedStatus(
      priceOracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenLimit(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenQuotaIncreaseFee(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      quotaIncreaseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTotalDebtLimit(
      pool: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVetoAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawFee(
      pool: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    vetoAdmin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeTransaction(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forbidAdapter(
      creditManager: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queuedTransactions(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rampLiquidationThreshold(
      creditManager: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      liquidationThresholdFinal: PromiseOrValue<BigNumberish>,
      rampStart: PromiseOrValue<BigNumberish>,
      rampDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCreditManagerDebtLimit(
      creditManager: PromiseOrValue<string>,
      debtLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExpirationDate(
      creditManager: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLPPriceFeedLimiter(
      priceFeed: PromiseOrValue<string>,
      lowerBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDebtLimit(
      creditManager: PromiseOrValue<string>,
      maxDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDebtPerBlockMultiplier(
      creditManager: PromiseOrValue<string>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinDebtLimit(
      creditManager: PromiseOrValue<string>,
      minDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinQuotaRate(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservePriceFeedStatus(
      priceOracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenLimit(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenQuotaIncreaseFee(
      pool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      quotaIncreaseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTotalDebtLimit(
      pool: PromiseOrValue<string>,
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVetoAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      pool: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vetoAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
