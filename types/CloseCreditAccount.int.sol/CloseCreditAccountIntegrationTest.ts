/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = {
    addr: PromiseOrValue<string>;
    selectors: PromiseOrValue<BytesLike>[];
  };

  export type FuzzSelectorStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };
}

export interface CloseCreditAccountIntegrationTestInterface
  extends utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "anyUnderlying()": FunctionFragment;
    "creditConfigurator()": FunctionFragment;
    "creditFacade()": FunctionFragment;
    "creditManager()": FunctionFragment;
    "degenNFT()": FunctionFragment;
    "excludeArtifacts()": FunctionFragment;
    "excludeContracts()": FunctionFragment;
    "excludeSenders()": FunctionFragment;
    "failed()": FunctionFragment;
    "gauge()": FunctionFragment;
    "poolQuotaKeeper()": FunctionFragment;
    "targetArtifactSelectors()": FunctionFragment;
    "targetArtifacts()": FunctionFragment;
    "targetContracts()": FunctionFragment;
    "targetSelectors()": FunctionFragment;
    "targetSenders()": FunctionFragment;
    "test_I_CCA_01_closeCreditAccount_reverts_if_credit_account_not_exists()": FunctionFragment;
    "test_I_CCA_02_closeCreditAccount_correctly_wraps_ETH()": FunctionFragment;
    "test_I_CCA_03_closeCreditAccount_runs_operations_in_correct_order()": FunctionFragment;
    "test_I_CCA_04_closeCreditAccount_reverts_on_internal_call_in_multicall_on_closure()": FunctionFragment;
    "test_I_CCA_05_close_credit_account_updates_pool_correctly()": FunctionFragment;
    "test_I_CCA_06_close_credit_account_returns_underlying_token_if_not_liquidated()": FunctionFragment;
    "test_I_CCA_07_close_credit_account_charges_caller_if_underlying_token_not_enough()": FunctionFragment;
    "test_I_CCA_08_liquidate_credit_account_charges_caller_if_underlying_token_not_enough()": FunctionFragment;
    "test_I_CCA_09_close_credit_account_with_nonzero_skipTokenMask_sends_correct_tokens()": FunctionFragment;
    "test_I_CCA_10_close_weth_credit_account_sends_eth_to_borrower()": FunctionFragment;
    "test_I_CCA_11_close_dai_credit_account_sends_eth_to_borrower()": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingT()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_TEST"
      | "anyUnderlying"
      | "creditConfigurator"
      | "creditFacade"
      | "creditManager"
      | "degenNFT"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "gauge"
      | "poolQuotaKeeper"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetSelectors"
      | "targetSenders"
      | "test_I_CCA_01_closeCreditAccount_reverts_if_credit_account_not_exists"
      | "test_I_CCA_02_closeCreditAccount_correctly_wraps_ETH"
      | "test_I_CCA_03_closeCreditAccount_runs_operations_in_correct_order"
      | "test_I_CCA_04_closeCreditAccount_reverts_on_internal_call_in_multicall_on_closure"
      | "test_I_CCA_05_close_credit_account_updates_pool_correctly"
      | "test_I_CCA_06_close_credit_account_returns_underlying_token_if_not_liquidated"
      | "test_I_CCA_07_close_credit_account_charges_caller_if_underlying_token_not_enough"
      | "test_I_CCA_08_liquidate_credit_account_charges_caller_if_underlying_token_not_enough"
      | "test_I_CCA_09_close_credit_account_with_nonzero_skipTokenMask_sends_correct_tokens"
      | "test_I_CCA_10_close_weth_credit_account_sends_eth_to_borrower"
      | "test_I_CCA_11_close_dai_credit_account_sends_eth_to_borrower"
      | "underlying"
      | "underlyingT"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "anyUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditConfigurator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditFacade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "degenNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "gauge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolQuotaKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_I_CCA_01_closeCreditAccount_reverts_if_credit_account_not_exists",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_I_CCA_02_closeCreditAccount_correctly_wraps_ETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_I_CCA_03_closeCreditAccount_runs_operations_in_correct_order",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_I_CCA_04_closeCreditAccount_reverts_on_internal_call_in_multicall_on_closure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_I_CCA_05_close_credit_account_updates_pool_correctly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_I_CCA_06_close_credit_account_returns_underlying_token_if_not_liquidated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_I_CCA_07_close_credit_account_charges_caller_if_underlying_token_not_enough",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_I_CCA_08_liquidate_credit_account_charges_caller_if_underlying_token_not_enough",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_I_CCA_09_close_credit_account_with_nonzero_skipTokenMask_sends_correct_tokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_I_CCA_10_close_weth_credit_account_sends_eth_to_borrower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_I_CCA_11_close_dai_credit_account_sends_eth_to_borrower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anyUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFacade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "degenNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolQuotaKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_I_CCA_01_closeCreditAccount_reverts_if_credit_account_not_exists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_I_CCA_02_closeCreditAccount_correctly_wraps_ETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_I_CCA_03_closeCreditAccount_runs_operations_in_correct_order",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_I_CCA_04_closeCreditAccount_reverts_on_internal_call_in_multicall_on_closure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_I_CCA_05_close_credit_account_updates_pool_correctly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_I_CCA_06_close_credit_account_returns_underlying_token_if_not_liquidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_I_CCA_07_close_credit_account_charges_caller_if_underlying_token_not_enough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_I_CCA_08_liquidate_credit_account_charges_caller_if_underlying_token_not_enough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_I_CCA_09_close_credit_account_with_nonzero_skipTokenMask_sends_correct_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_I_CCA_10_close_weth_credit_account_sends_eth_to_borrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_I_CCA_11_close_dai_credit_account_sends_eth_to_borrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "AddCollateral(address,address,uint256)": EventFragment;
    "CloseCreditAccount(address,address,address)": EventFragment;
    "DecreaseDebt(address,uint256)": EventFragment;
    "Execute(address,address)": EventFragment;
    "FinishMultiCall()": EventFragment;
    "IncreaseDebt(address,uint256)": EventFragment;
    "LiquidateCreditAccount(address,address,address,address,uint8,uint256)": EventFragment;
    "OpenCreditAccount(address,address,address,uint256,uint16)": EventFragment;
    "SetEnabledTokensMask(address,uint256)": EventFragment;
    "StartMultiCall(address,address)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinishMultiCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEnabledTokensMask"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartMultiCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface AddCollateralEventObject {
  creditAccount: string;
  token: string;
  value: BigNumber;
}
export type AddCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  AddCollateralEventObject
>;

export type AddCollateralEventFilter = TypedEventFilter<AddCollateralEvent>;

export interface CloseCreditAccountEventObject {
  creditAccount: string;
  borrower: string;
  to: string;
}
export type CloseCreditAccountEvent = TypedEvent<
  [string, string, string],
  CloseCreditAccountEventObject
>;

export type CloseCreditAccountEventFilter =
  TypedEventFilter<CloseCreditAccountEvent>;

export interface DecreaseDebtEventObject {
  creditAccount: string;
  amount: BigNumber;
}
export type DecreaseDebtEvent = TypedEvent<
  [string, BigNumber],
  DecreaseDebtEventObject
>;

export type DecreaseDebtEventFilter = TypedEventFilter<DecreaseDebtEvent>;

export interface ExecuteEventObject {
  creditAccount: string;
  targetContract: string;
}
export type ExecuteEvent = TypedEvent<[string, string], ExecuteEventObject>;

export type ExecuteEventFilter = TypedEventFilter<ExecuteEvent>;

export interface FinishMultiCallEventObject {}
export type FinishMultiCallEvent = TypedEvent<[], FinishMultiCallEventObject>;

export type FinishMultiCallEventFilter = TypedEventFilter<FinishMultiCallEvent>;

export interface IncreaseDebtEventObject {
  creditAccount: string;
  amount: BigNumber;
}
export type IncreaseDebtEvent = TypedEvent<
  [string, BigNumber],
  IncreaseDebtEventObject
>;

export type IncreaseDebtEventFilter = TypedEventFilter<IncreaseDebtEvent>;

export interface LiquidateCreditAccountEventObject {
  creditAccount: string;
  borrower: string;
  liquidator: string;
  to: string;
  closureAction: number;
  remainingFunds: BigNumber;
}
export type LiquidateCreditAccountEvent = TypedEvent<
  [string, string, string, string, number, BigNumber],
  LiquidateCreditAccountEventObject
>;

export type LiquidateCreditAccountEventFilter =
  TypedEventFilter<LiquidateCreditAccountEvent>;

export interface OpenCreditAccountEventObject {
  creditAccount: string;
  onBehalfOf: string;
  caller: string;
  debt: BigNumber;
  referralCode: number;
}
export type OpenCreditAccountEvent = TypedEvent<
  [string, string, string, BigNumber, number],
  OpenCreditAccountEventObject
>;

export type OpenCreditAccountEventFilter =
  TypedEventFilter<OpenCreditAccountEvent>;

export interface SetEnabledTokensMaskEventObject {
  creditAccount: string;
  enabledTokensMask: BigNumber;
}
export type SetEnabledTokensMaskEvent = TypedEvent<
  [string, BigNumber],
  SetEnabledTokensMaskEventObject
>;

export type SetEnabledTokensMaskEventFilter =
  TypedEventFilter<SetEnabledTokensMaskEvent>;

export interface StartMultiCallEventObject {
  creditAccount: string;
  caller: string;
}
export type StartMultiCallEvent = TypedEvent<
  [string, string],
  StartMultiCallEventObject
>;

export type StartMultiCallEventFilter = TypedEventFilter<StartMultiCallEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface CloseCreditAccountIntegrationTest extends BaseContract {
  contractName: "CloseCreditAccountIntegrationTest";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CloseCreditAccountIntegrationTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    anyUnderlying(overrides?: CallOverrides): Promise<[boolean]>;

    creditConfigurator(overrides?: CallOverrides): Promise<[string]>;

    creditFacade(overrides?: CallOverrides): Promise<[string]>;

    creditManager(overrides?: CallOverrides): Promise<[string]>;

    degenNFT(overrides?: CallOverrides): Promise<[string]>;

    excludeArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedArtifacts_: string[] }>;

    excludeContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedContracts_: string[] }>;

    excludeSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedSenders_: string[] }>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gauge(overrides?: CallOverrides): Promise<[string]>;

    poolQuotaKeeper(overrides?: CallOverrides): Promise<[string]>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedArtifacts_: string[] }>;

    targetContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedContracts_: string[] }>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedSenders_: string[] }>;

    test_I_CCA_01_closeCreditAccount_reverts_if_credit_account_not_exists(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_I_CCA_02_closeCreditAccount_correctly_wraps_ETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_I_CCA_03_closeCreditAccount_runs_operations_in_correct_order(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_I_CCA_04_closeCreditAccount_reverts_on_internal_call_in_multicall_on_closure(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_I_CCA_05_close_credit_account_updates_pool_correctly(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_I_CCA_06_close_credit_account_returns_underlying_token_if_not_liquidated(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_I_CCA_07_close_credit_account_charges_caller_if_underlying_token_not_enough(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_I_CCA_08_liquidate_credit_account_charges_caller_if_underlying_token_not_enough(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_I_CCA_09_close_credit_account_with_nonzero_skipTokenMask_sends_correct_tokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_I_CCA_10_close_weth_credit_account_sends_eth_to_borrower(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_I_CCA_11_close_dai_credit_account_sends_eth_to_borrower(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    underlyingT(overrides?: CallOverrides): Promise<[number]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  anyUnderlying(overrides?: CallOverrides): Promise<boolean>;

  creditConfigurator(overrides?: CallOverrides): Promise<string>;

  creditFacade(overrides?: CallOverrides): Promise<string>;

  creditManager(overrides?: CallOverrides): Promise<string>;

  degenNFT(overrides?: CallOverrides): Promise<string>;

  excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

  excludeContracts(overrides?: CallOverrides): Promise<string[]>;

  excludeSenders(overrides?: CallOverrides): Promise<string[]>;

  failed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gauge(overrides?: CallOverrides): Promise<string>;

  poolQuotaKeeper(overrides?: CallOverrides): Promise<string>;

  targetArtifactSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

  targetContracts(overrides?: CallOverrides): Promise<string[]>;

  targetSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetSenders(overrides?: CallOverrides): Promise<string[]>;

  test_I_CCA_01_closeCreditAccount_reverts_if_credit_account_not_exists(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_I_CCA_02_closeCreditAccount_correctly_wraps_ETH(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_I_CCA_03_closeCreditAccount_runs_operations_in_correct_order(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_I_CCA_04_closeCreditAccount_reverts_on_internal_call_in_multicall_on_closure(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_I_CCA_05_close_credit_account_updates_pool_correctly(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_I_CCA_06_close_credit_account_returns_underlying_token_if_not_liquidated(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_I_CCA_07_close_credit_account_charges_caller_if_underlying_token_not_enough(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_I_CCA_08_liquidate_credit_account_charges_caller_if_underlying_token_not_enough(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_I_CCA_09_close_credit_account_with_nonzero_skipTokenMask_sends_correct_tokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_I_CCA_10_close_weth_credit_account_sends_eth_to_borrower(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_I_CCA_11_close_dai_credit_account_sends_eth_to_borrower(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingT(overrides?: CallOverrides): Promise<number>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    anyUnderlying(overrides?: CallOverrides): Promise<boolean>;

    creditConfigurator(overrides?: CallOverrides): Promise<string>;

    creditFacade(overrides?: CallOverrides): Promise<string>;

    creditManager(overrides?: CallOverrides): Promise<string>;

    degenNFT(overrides?: CallOverrides): Promise<string>;

    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

    excludeContracts(overrides?: CallOverrides): Promise<string[]>;

    excludeSenders(overrides?: CallOverrides): Promise<string[]>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    gauge(overrides?: CallOverrides): Promise<string>;

    poolQuotaKeeper(overrides?: CallOverrides): Promise<string>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

    targetContracts(overrides?: CallOverrides): Promise<string[]>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetSenders(overrides?: CallOverrides): Promise<string[]>;

    test_I_CCA_01_closeCreditAccount_reverts_if_credit_account_not_exists(
      overrides?: CallOverrides
    ): Promise<void>;

    test_I_CCA_02_closeCreditAccount_correctly_wraps_ETH(
      overrides?: CallOverrides
    ): Promise<void>;

    test_I_CCA_03_closeCreditAccount_runs_operations_in_correct_order(
      overrides?: CallOverrides
    ): Promise<void>;

    test_I_CCA_04_closeCreditAccount_reverts_on_internal_call_in_multicall_on_closure(
      overrides?: CallOverrides
    ): Promise<void>;

    test_I_CCA_05_close_credit_account_updates_pool_correctly(
      overrides?: CallOverrides
    ): Promise<void>;

    test_I_CCA_06_close_credit_account_returns_underlying_token_if_not_liquidated(
      overrides?: CallOverrides
    ): Promise<void>;

    test_I_CCA_07_close_credit_account_charges_caller_if_underlying_token_not_enough(
      overrides?: CallOverrides
    ): Promise<void>;

    test_I_CCA_08_liquidate_credit_account_charges_caller_if_underlying_token_not_enough(
      overrides?: CallOverrides
    ): Promise<void>;

    test_I_CCA_09_close_credit_account_with_nonzero_skipTokenMask_sends_correct_tokens(
      overrides?: CallOverrides
    ): Promise<void>;

    test_I_CCA_10_close_weth_credit_account_sends_eth_to_borrower(
      overrides?: CallOverrides
    ): Promise<void>;

    test_I_CCA_11_close_dai_credit_account_sends_eth_to_borrower(
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingT(overrides?: CallOverrides): Promise<number>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddCollateral(address,address,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      value?: null
    ): AddCollateralEventFilter;
    AddCollateral(
      creditAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      value?: null
    ): AddCollateralEventFilter;

    "CloseCreditAccount(address,address,address)"(
      creditAccount?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): CloseCreditAccountEventFilter;
    CloseCreditAccount(
      creditAccount?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): CloseCreditAccountEventFilter;

    "DecreaseDebt(address,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      amount?: null
    ): DecreaseDebtEventFilter;
    DecreaseDebt(
      creditAccount?: PromiseOrValue<string> | null,
      amount?: null
    ): DecreaseDebtEventFilter;

    "Execute(address,address)"(
      creditAccount?: PromiseOrValue<string> | null,
      targetContract?: PromiseOrValue<string> | null
    ): ExecuteEventFilter;
    Execute(
      creditAccount?: PromiseOrValue<string> | null,
      targetContract?: PromiseOrValue<string> | null
    ): ExecuteEventFilter;

    "FinishMultiCall()"(): FinishMultiCallEventFilter;
    FinishMultiCall(): FinishMultiCallEventFilter;

    "IncreaseDebt(address,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      amount?: null
    ): IncreaseDebtEventFilter;
    IncreaseDebt(
      creditAccount?: PromiseOrValue<string> | null,
      amount?: null
    ): IncreaseDebtEventFilter;

    "LiquidateCreditAccount(address,address,address,address,uint8,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      to?: null,
      closureAction?: null,
      remainingFunds?: null
    ): LiquidateCreditAccountEventFilter;
    LiquidateCreditAccount(
      creditAccount?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      to?: null,
      closureAction?: null,
      remainingFunds?: null
    ): LiquidateCreditAccountEventFilter;

    "OpenCreditAccount(address,address,address,uint256,uint16)"(
      creditAccount?: PromiseOrValue<string> | null,
      onBehalfOf?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      debt?: null,
      referralCode?: null
    ): OpenCreditAccountEventFilter;
    OpenCreditAccount(
      creditAccount?: PromiseOrValue<string> | null,
      onBehalfOf?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      debt?: null,
      referralCode?: null
    ): OpenCreditAccountEventFilter;

    "SetEnabledTokensMask(address,uint256)"(
      creditAccount?: PromiseOrValue<string> | null,
      enabledTokensMask?: null
    ): SetEnabledTokensMaskEventFilter;
    SetEnabledTokensMask(
      creditAccount?: PromiseOrValue<string> | null,
      enabledTokensMask?: null
    ): SetEnabledTokensMaskEventFilter;

    "StartMultiCall(address,address)"(
      creditAccount?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): StartMultiCallEventFilter;
    StartMultiCall(
      creditAccount?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): StartMultiCallEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    anyUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    creditConfigurator(overrides?: CallOverrides): Promise<BigNumber>;

    creditFacade(overrides?: CallOverrides): Promise<BigNumber>;

    creditManager(overrides?: CallOverrides): Promise<BigNumber>;

    degenNFT(overrides?: CallOverrides): Promise<BigNumber>;

    excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gauge(overrides?: CallOverrides): Promise<BigNumber>;

    poolQuotaKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    targetContracts(overrides?: CallOverrides): Promise<BigNumber>;

    targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetSenders(overrides?: CallOverrides): Promise<BigNumber>;

    test_I_CCA_01_closeCreditAccount_reverts_if_credit_account_not_exists(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_I_CCA_02_closeCreditAccount_correctly_wraps_ETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_I_CCA_03_closeCreditAccount_runs_operations_in_correct_order(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_I_CCA_04_closeCreditAccount_reverts_on_internal_call_in_multicall_on_closure(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_I_CCA_05_close_credit_account_updates_pool_correctly(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_I_CCA_06_close_credit_account_returns_underlying_token_if_not_liquidated(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_I_CCA_07_close_credit_account_charges_caller_if_underlying_token_not_enough(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_I_CCA_08_liquidate_credit_account_charges_caller_if_underlying_token_not_enough(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_I_CCA_09_close_credit_account_with_nonzero_skipTokenMask_sends_correct_tokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_I_CCA_10_close_weth_credit_account_sends_eth_to_borrower(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_I_CCA_11_close_dai_credit_account_sends_eth_to_borrower(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingT(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    anyUnderlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditConfigurator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditFacade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    degenNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolQuotaKeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test_I_CCA_01_closeCreditAccount_reverts_if_credit_account_not_exists(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_I_CCA_02_closeCreditAccount_correctly_wraps_ETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_I_CCA_03_closeCreditAccount_runs_operations_in_correct_order(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_I_CCA_04_closeCreditAccount_reverts_on_internal_call_in_multicall_on_closure(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_I_CCA_05_close_credit_account_updates_pool_correctly(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_I_CCA_06_close_credit_account_returns_underlying_token_if_not_liquidated(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_I_CCA_07_close_credit_account_charges_caller_if_underlying_token_not_enough(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_I_CCA_08_liquidate_credit_account_charges_caller_if_underlying_token_not_enough(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_I_CCA_09_close_credit_account_with_nonzero_skipTokenMask_sends_correct_tokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_I_CCA_10_close_weth_credit_account_sends_eth_to_borrower(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_I_CCA_11_close_dai_credit_account_sends_eth_to_borrower(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
