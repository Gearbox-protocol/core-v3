/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BotListMockInterface extends utils.Interface {
  functions: {
    "eraseAllBotPermissions(address,address)": FunctionFragment;
    "getBotStatus(address,address,address)": FunctionFragment;
    "payBot(address,address,address,address,uint72)": FunctionFragment;
    "setBotPermissions(address,address,address,uint192,uint72,uint72)": FunctionFragment;
    "setBotPermissionsReturn(uint256)": FunctionFragment;
    "setBotStatusReturns(uint256,bool,bool)": FunctionFragment;
    "setRevertOnErase(bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "eraseAllBotPermissions"
      | "getBotStatus"
      | "payBot"
      | "setBotPermissions"
      | "setBotPermissionsReturn"
      | "setBotStatusReturns"
      | "setRevertOnErase"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "eraseAllBotPermissions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBotStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payBot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotPermissions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotPermissionsReturn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotStatusReturns",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevertOnErase",
    values: [PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "eraseAllBotPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBotStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payBot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBotPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotPermissionsReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotStatusReturns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevertOnErase",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BotListMock extends BaseContract {
  contractName: "BotListMock";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BotListMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    eraseAllBotPermissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getBotStatus(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        botPermissions: BigNumber;
        forbidden: boolean;
        hasSpecialPermissions: boolean;
      }
    >;

    payBot(
      payer: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBotPermissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { activeBotsRemaining: BigNumber }>;

    setBotPermissionsReturn(
      activeBotsRemaining: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBotStatusReturns(
      botPermissions: PromiseOrValue<BigNumberish>,
      forbidden: PromiseOrValue<boolean>,
      hasSpecialPermissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRevertOnErase(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  eraseAllBotPermissions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  getBotStatus(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, boolean] & {
      botPermissions: BigNumber;
      forbidden: boolean;
      hasSpecialPermissions: boolean;
    }
  >;

  payBot(
    payer: PromiseOrValue<string>,
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    bot: PromiseOrValue<string>,
    paymentAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBotPermissions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBotPermissionsReturn(
    activeBotsRemaining: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBotStatusReturns(
    botPermissions: PromiseOrValue<BigNumberish>,
    forbidden: PromiseOrValue<boolean>,
    hasSpecialPermissions: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRevertOnErase(
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    eraseAllBotPermissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBotStatus(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        botPermissions: BigNumber;
        forbidden: boolean;
        hasSpecialPermissions: boolean;
      }
    >;

    payBot(
      payer: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBotPermissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBotPermissionsReturn(
      activeBotsRemaining: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBotStatusReturns(
      botPermissions: PromiseOrValue<BigNumberish>,
      forbidden: PromiseOrValue<boolean>,
      hasSpecialPermissions: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevertOnErase(
      _value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    eraseAllBotPermissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBotStatus(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payBot(
      payer: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBotPermissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBotPermissionsReturn(
      activeBotsRemaining: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBotStatusReturns(
      botPermissions: PromiseOrValue<BigNumberish>,
      forbidden: PromiseOrValue<boolean>,
      hasSpecialPermissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRevertOnErase(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    eraseAllBotPermissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBotStatus(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payBot(
      payer: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBotPermissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBotPermissionsReturn(
      activeBotsRemaining: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBotStatusReturns(
      botPermissions: PromiseOrValue<BigNumberish>,
      forbidden: PromiseOrValue<boolean>,
      hasSpecialPermissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRevertOnErase(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
