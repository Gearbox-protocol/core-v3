/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { GeneralMock, GeneralMockInterface } from "../GeneralMock";

const _abi = [
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "data",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061038c806100206000396000f3fe6080604052600436106100225760003560e01c806373d4a13a1461004557610029565b3661002957005b34801561003557600080fd5b5060006100433682806101cf565b005b34801561005157600080fd5b5061005a610070565b60405161006791906102ea565b60405180910390f35b6000805461007d9061012d565b80601f01602080910402602001604051908101604052809291908181526020018280546100a99061012d565b80156100f65780601f106100cb576101008083540402835291602001916100f6565b820191906000526020600020905b8154815290600101906020018083116100d957829003601f168201915b505050505081565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c9082168061014157607f821691505b60208210810361017a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156101ca57600081815260208120601f850160051c810160208610156101a75750805b601f850160051c820191505b818110156101c6578281556001016101b3565b5050505b505050565b67ffffffffffffffff8311156101e7576101e76100fe565b6101fb836101f5835461012d565b83610180565b6000601f84116001811461024d57600085156102175750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556102e3565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561029c578685013582556020948501946001909201910161027c565b50868210156102d7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600060208083528351808285015260005b81811015610317578581018301518582016040015282016102fb565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea2646970667358221220a849109b2891c357f65c867820a53a43dcf2273ba1b61dd2b02aa605b3ca3c6464736f6c63430008110033";

type GeneralMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GeneralMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GeneralMock__factory extends ContractFactory {
  constructor(...args: GeneralMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "GeneralMock";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GeneralMock> {
    return super.deploy(overrides || {}) as Promise<GeneralMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GeneralMock {
    return super.attach(address) as GeneralMock;
  }
  override connect(signer: Signer): GeneralMock__factory {
    return super.connect(signer) as GeneralMock__factory;
  }
  static readonly contractName: "GeneralMock";

  public readonly contractName: "GeneralMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GeneralMockInterface {
    return new utils.Interface(_abi) as GeneralMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GeneralMock {
    return new Contract(address, _abi, signerOrProvider) as GeneralMock;
  }
}
