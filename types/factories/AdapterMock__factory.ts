/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { AdapterMock, AdapterMockInterface } from "../AdapterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_creditManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_targetContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "addressProvider",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "creditManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokensToEnable",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_tokensToDisable",
        type: "uint256",
      },
    ],
    name: "dumbCall",
    outputs: [
      {
        internalType: "uint256",
        name: "tokensToEnable",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokensToDisable",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dumbCallData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "disableTokenIn",
        type: "bool",
      },
    ],
    name: "executeSwapSafeApprove",
    outputs: [
      {
        internalType: "uint256",
        name: "tokensToEnable",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokensToDisable",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "targetContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b50604051610a7f380380610a7f83398101604081905261002f916100d1565b6001600160a01b038216608081905260408051630a55006360e21b81529051632954018c916004808201926020929091908290030181865afa158015610079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009d9190610104565b6001600160a01b0390811660a0521660c05250610126565b80516001600160a01b03811681146100cc57600080fd5b919050565b600080604083850312156100e457600080fd5b6100ed836100b5565b91506100fb602084016100b5565b90509250929050565b60006020828403121561011657600080fd5b61011f826100b5565b9392505050565b60805160a05160c051610916610169600039600061021c0152600060b9015260008181610243015281816102a5015281816104c8015261058101526109166000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a4cb202a11610050578063a4cb202a146101f5578063bd90df7014610217578063c12c21c01461023e57610072565b80632954018c146100b457806354f6886d14610105578063a0c5a96e146101cd575b6100b26000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061026592505050565b005b6100db7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101c060405160206024820152600560448201527f776f726c640000000000000000000000000000000000000000000000000000006064820152606090608401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa777d0dc00000000000000000000000000000000000000000000000000000000179052919050565b6040516100fc919061064f565b6101e06101db366004610669565b610345565b604080519283526020830191909152016100fc565b610208610203366004610778565b610414565b6040516100fc93929190610831565b6100db7f000000000000000000000000000000000000000000000000000000000000000081565b6100db7f000000000000000000000000000000000000000000000000000000000000000081565b6040517f09c5eabe00000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906309c5eabe906102da90859060040161064f565b6000604051808303816000875af11580156102f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261033f9190810190610859565b92915050565b60008061040b61040660405160206024820152600560448201527f776f726c640000000000000000000000000000000000000000000000000000006064820152606090608401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa777d0dc00000000000000000000000000000000000000000000000000000000179052919050565b610265565b50929391925050565b600080606061042286610480565b925083156104365761043387610480565b91505b610460877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610535565b61046985610265565b9050610476876001610535565b9450945094915050565b6040517fd5c2f48600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d5c2f48690602401602060405180830381865afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033f91906108c7565b6040517ffa30b30f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063fa30b30f90604401600060405180830381600087803b1580156105c557600080fd5b505af11580156105d9573d6000803e3d6000fd5b505050505050565b60005b838110156105fc5781810151838201526020016105e4565b50506000910152565b6000815180845261061d8160208601602086016105e1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106626020830184610605565b9392505050565b6000806040838503121561067c57600080fd5b50508035926020909101359150565b803573ffffffffffffffffffffffffffffffffffffffff811681146106af57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561072a5761072a6106b4565b604052919050565b600067ffffffffffffffff82111561074c5761074c6106b4565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000806000806080858703121561078e57600080fd5b6107978561068b565b93506107a56020860161068b565b9250604085013567ffffffffffffffff8111156107c157600080fd5b8501601f810187136107d257600080fd5b80356107e56107e082610732565b6106e3565b8181528860208385010111156107fa57600080fd5b816020840160208301376000602083830101528094505050506060850135801515811461082657600080fd5b939692955090935050565b8381528260208201526060604082015260006108506060830184610605565b95945050505050565b60006020828403121561086b57600080fd5b815167ffffffffffffffff81111561088257600080fd5b8201601f8101841361089357600080fd5b80516108a16107e082610732565b8181528560208385010111156108b657600080fd5b6108508260208301602086016105e1565b6000602082840312156108d957600080fd5b505191905056fea26469706673582212206fb02f1f61a3670c9927f40a23c48b3fe1d1d461b324663763a32b7da35b22af64736f6c63430008110033";

type AdapterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AdapterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AdapterMock__factory extends ContractFactory {
  constructor(...args: AdapterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AdapterMock";
  }

  override deploy(
    _creditManager: PromiseOrValue<string>,
    _targetContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AdapterMock> {
    return super.deploy(
      _creditManager,
      _targetContract,
      overrides || {}
    ) as Promise<AdapterMock>;
  }
  override getDeployTransaction(
    _creditManager: PromiseOrValue<string>,
    _targetContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _creditManager,
      _targetContract,
      overrides || {}
    );
  }
  override attach(address: string): AdapterMock {
    return super.attach(address) as AdapterMock;
  }
  override connect(signer: Signer): AdapterMock__factory {
    return super.connect(signer) as AdapterMock__factory;
  }
  static readonly contractName: "AdapterMock";

  public readonly contractName: "AdapterMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AdapterMockInterface {
    return new utils.Interface(_abi) as AdapterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AdapterMock {
    return new Contract(address, _abi, signerOrProvider) as AdapterMock;
  }
}
