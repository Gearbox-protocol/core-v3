/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  TargetContractMock,
  TargetContractMockInterface,
} from "../TargetContractMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "callData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610374806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634e417a981461003a575b60006100383682806101b7565b005b610042610058565b60405161004f91906102d2565b60405180910390f35b6000805461006590610115565b80601f016020809104026020016040519081016040528092919081815260200182805461009190610115565b80156100de5780601f106100b3576101008083540402835291602001916100de565b820191906000526020600020905b8154815290600101906020018083116100c157829003601f168201915b505050505081565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c9082168061012957607f821691505b602082108103610162577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156101b257600081815260208120601f850160051c8101602086101561018f5750805b601f850160051c820191505b818110156101ae5782815560010161019b565b5050505b505050565b67ffffffffffffffff8311156101cf576101cf6100e6565b6101e3836101dd8354610115565b83610168565b6000601f84116001811461023557600085156101ff5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556102cb565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156102845786850135825560209485019460019092019101610264565b50868210156102bf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600060208083528351808285015260005b818110156102ff578581018301518582016040015282016102e3565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea26469706673582212208b13a576f15cddc4617ecfd29c0143197e55096e7f9cc27526b5925028b9a5f164736f6c63430008110033";

type TargetContractMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TargetContractMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TargetContractMock__factory extends ContractFactory {
  constructor(...args: TargetContractMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TargetContractMock";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TargetContractMock> {
    return super.deploy(overrides || {}) as Promise<TargetContractMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TargetContractMock {
    return super.attach(address) as TargetContractMock;
  }
  override connect(signer: Signer): TargetContractMock__factory {
    return super.connect(signer) as TargetContractMock__factory;
  }
  static readonly contractName: "TargetContractMock";

  public readonly contractName: "TargetContractMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TargetContractMockInterface {
    return new utils.Interface(_abi) as TargetContractMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TargetContractMock {
    return new Contract(address, _abi, signerOrProvider) as TargetContractMock;
  }
}
