/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BalanceOps,
  BalanceOpsInterface,
} from "../../Balances.sol/BalanceOps";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "UnknownToken",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122084132ba1ebdcdc929a3e059263812a2e74d16a6c9a0182c2b04c38b0894d0cf464736f6c63430008110033";

type BalanceOpsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalanceOpsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalanceOps__factory extends ContractFactory {
  constructor(...args: BalanceOpsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BalanceOps";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BalanceOps> {
    return super.deploy(overrides || {}) as Promise<BalanceOps>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BalanceOps {
    return super.attach(address) as BalanceOps;
  }
  override connect(signer: Signer): BalanceOps__factory {
    return super.connect(signer) as BalanceOps__factory;
  }
  static readonly contractName: "BalanceOps";

  public readonly contractName: "BalanceOps";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalanceOpsInterface {
    return new utils.Interface(_abi) as BalanceOpsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BalanceOps {
    return new Contract(address, _abi, signerOrProvider) as BalanceOps;
  }
}
