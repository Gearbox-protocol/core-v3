/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { PriceFeedMock, PriceFeedMockInterface } from "../PriceFeedMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "_price",
        type: "int256",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
      {
        internalType: "uint256",
        name: "_startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "_answerInRound",
        type: "uint80",
      },
    ],
    name: "setParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "newPrice",
        type: "int256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "setRevertOnLatestRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum FlagState",
        name: "f",
        type: "uint8",
      },
    ],
    name: "setSkipPriceCheck",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "skipPriceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f91610088565b600082905560ff81166080526001805460506001600160501b0319918216811790925560048054909116909117905561006c4263bbf81e006100be565b60025561007d4263bbf81e006100be565b600355506100e59050565b6000806040838503121561009b57600080fd5b82519150602083015160ff811681146100b357600080fd5b809150509250929050565b808201808211156100df57634e487b7160e01b600052601160045260246000fd5b92915050565b6080516105956100ff600039600060c801526105956000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063bd18ad5311610076578063d62ada111161005b578063d62ada11146102ae578063f7a30806146102c6578063feaf968c146102d957600080fd5b8063bd18ad531461020d578063cd653afc1461022057600080fd5b806367e8d83d116100a757806367e8d83d146101105780637284e416146101615780639a6fc8f5146101a057600080fd5b8063313ce567146100c357806354fd4d5014610101575b600080fd5b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020015b60405180910390f35b604051600181526020016100f8565b61015f61011e3660046103e1565b600480549115156b010000000000000000000000027fffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff909216919091179055565b005b604080518082018252600c81527f7072696365206f7261636c650000000000000000000000000000000000000000602082015290516100f8919061040a565b6101d66101ae366004610495565b60015460005460025460035460045469ffffffffffffffffffff948516941691939590929450565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100f8565b61015f61021b3660046104b0565b6102e1565b61015f61022e3660046104d1565b6001805469ffffffffffffffffffff9586167fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000090911617905560029290925560035560048054919092167fffffffffffffffffffffffffffffffffffffffffff0000000000000000000000909116176a0200000000000000000000179055565b6102b6610330565b60405190151581526020016100f8565b61015f6102d4366004610517565b600055565b6101d6610355565b600480548291907fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff166a010000000000000000000083600281111561032857610328610530565b021790555050565b600454600090610350906a0100000000000000000000900460ff166103a6565b905090565b60008060008060006004600b9054906101000a900460ff161561037757600080fd5b505060015460005460025460035460045469ffffffffffffffffffff9485169893975091955093509190911690565b600060028260028111156103bc576103bc610530565b036103c657600080fd5b60018260028111156103da576103da610530565b1492915050565b6000602082840312156103f357600080fd5b8135801515811461040357600080fd5b9392505050565b600060208083528351808285015260005b818110156104375785810183015185820160400152820161041b565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803569ffffffffffffffffffff8116811461049057600080fd5b919050565b6000602082840312156104a757600080fd5b61040382610476565b6000602082840312156104c257600080fd5b81356003811061040357600080fd5b600080600080608085870312156104e757600080fd5b6104f085610476565b9350602085013592506040850135915061050c60608601610476565b905092959194509250565b60006020828403121561052957600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220d79ca0d1e0aafc8050c4df2da0cdd55a48416983cda589cc4b02881efc7c23dd64736f6c63430008110033";

type PriceFeedMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriceFeedMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PriceFeedMock__factory extends ContractFactory {
  constructor(...args: PriceFeedMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "PriceFeedMock";
  }

  override deploy(
    _price: PromiseOrValue<BigNumberish>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PriceFeedMock> {
    return super.deploy(
      _price,
      _decimals,
      overrides || {}
    ) as Promise<PriceFeedMock>;
  }
  override getDeployTransaction(
    _price: PromiseOrValue<BigNumberish>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_price, _decimals, overrides || {});
  }
  override attach(address: string): PriceFeedMock {
    return super.attach(address) as PriceFeedMock;
  }
  override connect(signer: Signer): PriceFeedMock__factory {
    return super.connect(signer) as PriceFeedMock__factory;
  }
  static readonly contractName: "PriceFeedMock";

  public readonly contractName: "PriceFeedMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceFeedMockInterface {
    return new utils.Interface(_abi) as PriceFeedMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceFeedMock {
    return new Contract(address, _abi, signerOrProvider) as PriceFeedMock;
  }
}
