/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  USDT_Transfer,
  USDT_TransferInterface,
} from "../../USDT_Transfer.sol/USDT_Transfer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdt",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x60a0604052348015600f57600080fd5b5060405160bc38038060bc833981016040819052602a91603a565b6001600160a01b03166080526068565b600060208284031215604b57600080fd5b81516001600160a01b0381168114606157600080fd5b9392505050565b608051603f607d60003960005050603f6000f3fe6080604052600080fdfea26469706673582212203bf78dae541eb2dfde865a9e59e4d51f3beb989134bfe484f406d8f9b70edabc64736f6c63430008110033";

type USDT_TransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: USDT_TransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class USDT_Transfer__factory extends ContractFactory {
  constructor(...args: USDT_TransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "USDT_Transfer";
  }

  override deploy(
    _usdt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<USDT_Transfer> {
    return super.deploy(_usdt, overrides || {}) as Promise<USDT_Transfer>;
  }
  override getDeployTransaction(
    _usdt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_usdt, overrides || {});
  }
  override attach(address: string): USDT_Transfer {
    return super.attach(address) as USDT_Transfer;
  }
  override connect(signer: Signer): USDT_Transfer__factory {
    return super.connect(signer) as USDT_Transfer__factory;
  }
  static readonly contractName: "USDT_Transfer";

  public readonly contractName: "USDT_Transfer";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): USDT_TransferInterface {
    return new utils.Interface(_abi) as USDT_TransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): USDT_Transfer {
    return new Contract(address, _abi, signerOrProvider) as USDT_Transfer;
  }
}
