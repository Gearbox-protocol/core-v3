/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { DegenNFTMock, DegenNFTMockInterface } from "../DegenNFTMock";

const _abi = [
  {
    inputs: [],
    name: "InsufficientBalanceException",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_revertOnBurn",
        type: "bool",
      },
    ],
    name: "setRevertOnBurn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061016f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636e0e97721461003b5780639dc29fac1461007c575b600080fd5b61007a6100493660046100cb565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b005b61007a61008a3660046100f4565b60005460ff16156100c7576040517f90c9142d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6000602082840312156100dd57600080fd5b813580151581146100ed57600080fd5b9392505050565b6000806040838503121561010757600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461012b57600080fd5b94602093909301359350505056fea2646970667358221220df1b37138c0d47394397d55e106b0564a876beef26326713f22f82668b1af98464736f6c63430008110033";

type DegenNFTMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DegenNFTMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DegenNFTMock__factory extends ContractFactory {
  constructor(...args: DegenNFTMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "DegenNFTMock";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DegenNFTMock> {
    return super.deploy(overrides || {}) as Promise<DegenNFTMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DegenNFTMock {
    return super.attach(address) as DegenNFTMock;
  }
  override connect(signer: Signer): DegenNFTMock__factory {
    return super.connect(signer) as DegenNFTMock__factory;
  }
  static readonly contractName: "DegenNFTMock";

  public readonly contractName: "DegenNFTMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DegenNFTMockInterface {
    return new utils.Interface(_abi) as DegenNFTMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DegenNFTMock {
    return new Contract(address, _abi, signerOrProvider) as DegenNFTMock;
  }
}
