/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { GaugeMock, GaugeMockInterface } from "../GaugeMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_pool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotConfiguratorException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotUnpausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressException",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "NewController",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "acl",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "rate",
        type: "uint16",
      },
    ],
    name: "addQuotaToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "addressProvider",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "rate",
        type: "uint16",
      },
    ],
    name: "changeQuotaTokenRateParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "getRates",
    outputs: [
      {
        internalType: "uint16[]",
        name: "result",
        type: "uint16[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pool",
    outputs: [
      {
        internalType: "contract PoolV3",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rates",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "setController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateEpoch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e06040526000805461ff0019166101001790553480156200002057600080fd5b50604051620010a8380380620010a883398101604081905262000043916200028d565b806001600160a01b0316632954018c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000082573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a891906200028d565b8080620000b58162000262565b604051632bdad0e360e11b8152621050d360ea1b6004820152600060248201526001600160a01b038316906357b5a1c690604401602060405180830381865afa15801562000107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012d91906200028d565b6001600160a01b031660808190526000805460ff1916905560408051638da5cb5b60e01b81529051919350638da5cb5b92506004808201926020929091908290030181865afa15801562000185573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ab91906200028d565b600080546001600160a01b0392909216620100000262010000600160b01b03199092169190911790555080620001e18162000262565b816001600160a01b0316632954018c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024691906200028d565b6001600160a01b0390811660a0529190911660c05250620002bf565b6001600160a01b0381166200028a57604051635919af9760e11b815260040160405180910390fd5b50565b600060208284031215620002a057600080fd5b81516001600160a01b0381168114620002b857600080fd5b9392505050565b60805160a05160c051610d97620003116000396000818160e90152818161026d01526105eb0152600061013a015260008181610221015281816108bf015281816109ec0152610ad20152610d976000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638456cb591161008c578063aa59c0e511610066578063aa59c0e5146101f6578063c6d6ce9014610209578063de2873591461021c578063f77c47911461024357600080fd5b80638456cb59146101a457806392eefe9b146101ac578063a8734f0b146101bf57600080fd5b80633f4ba83a116100bd5780633f4ba83a146101665780635c975abb1461016e57806367bd79a21461018457600080fd5b806316f0115b146100e45780632954018c1461013557806336f4fb021461015c575b600080fd5b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b610164610269565b005b61016461035f565b60005460ff16604051901515815260200161012c565b610197610192366004610b64565b610371565b60405161012c9190610c47565b61016461044c565b6101646101ba366004610c8f565b61045c565b6101e36101cd366004610c8f565b60016020526000908152604090205461ffff1681565b60405161ffff909116815260200161012c565b610164610204366004610cb3565b610502565b610164610217366004610cb3565b610563565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b60005461010b9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663be8da14b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fa9190610cf3565b90508073ffffffffffffffffffffffffffffffffffffffff16633c3821f46040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561034457600080fd5b505af1158015610358573d6000803e3d6000fd5b5050505050565b6103676106e2565b61036f610721565b565b80516060908067ffffffffffffffff81111561038f5761038f610b03565b6040519080825280602002602001820160405280156103b8578160200160208202803683370190505b50915060005b818110156104455760008482815181106103da576103da610d10565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff811660009081526001909252604090912054855191925061ffff169085908490811061042957610429610d10565b61ffff90921660209283029190910190910152506001016103be565b5050919050565b61045461079e565b61036f6107dd565b610464610838565b60005473ffffffffffffffffffffffffffffffffffffffff8281166201000090920416146104ff57600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff841690810291909117825560405190917fe253457d9ad994ca9682fc3bbc38c890dca73a2d5ecee3809e548bac8b00d7c691a25b50565b61050a610838565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b61056b610838565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260016020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff871617905580517fbe8da14b000000000000000000000000000000000000000000000000000000008152905192937f0000000000000000000000000000000000000000000000000000000000000000169263be8da14b926004808401939192918290030181865afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106589190610cf3565b6040517f364395ee00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529192509082169063364395ee90602401600060405180830381600087803b1580156106c557600080fd5b505af11580156106d9573d6000803e3d6000fd5b50505050505050565b6106eb33610877565b61036f576040517f16e29ab700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610729610933565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b6107a7336109a4565b61036f576040517fd794b1e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107e5610a1d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586107743390565b61084133610a8a565b61036f576040517f61081c1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fd4eb5db000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d4eb5db0906024015b602060405180830381865afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d9190610d3f565b92915050565b60005460ff1661036f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064015b60405180910390fd5b6040517f3a41ec6400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a41ec64906024016108ec565b60005460ff161561036f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161099b565b6040517f5f259aba00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635f259aba906024016108ec565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146104ff57600080fd5b8035610b5f81610b32565b919050565b60006020808385031215610b7757600080fd5b823567ffffffffffffffff80821115610b8f57600080fd5b818501915085601f830112610ba357600080fd5b813581811115610bb557610bb5610b03565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610bf857610bf8610b03565b604052918252848201925083810185019188831115610c1657600080fd5b938501935b82851015610c3b57610c2c85610b54565b84529385019392850192610c1b565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610c8357835161ffff1683529284019291840191600101610c63565b50909695505050505050565b600060208284031215610ca157600080fd5b8135610cac81610b32565b9392505050565b60008060408385031215610cc657600080fd5b8235610cd181610b32565b9150602083013561ffff81168114610ce857600080fd5b809150509250929050565b600060208284031215610d0557600080fd5b8151610cac81610b32565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610d5157600080fd5b81518015158114610cac57600080fdfea2646970667358221220c655ba48dddd4a2278d14f112e4c1c91bcf105044389aec164696228d3ab536764736f6c63430008110033";

type GaugeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GaugeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GaugeMock__factory extends ContractFactory {
  constructor(...args: GaugeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "GaugeMock";
  }

  override deploy(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GaugeMock> {
    return super.deploy(_pool, overrides || {}) as Promise<GaugeMock>;
  }
  override getDeployTransaction(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_pool, overrides || {});
  }
  override attach(address: string): GaugeMock {
    return super.attach(address) as GaugeMock;
  }
  override connect(signer: Signer): GaugeMock__factory {
    return super.connect(signer) as GaugeMock__factory;
  }
  static readonly contractName: "GaugeMock";

  public readonly contractName: "GaugeMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GaugeMockInterface {
    return new utils.Interface(_abi) as GaugeMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GaugeMock {
    return new Contract(address, _abi, signerOrProvider) as GaugeMock;
  }
}
