/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CreditAccountMock,
  CreditAccountMockInterface,
} from "../../CreditAccountMock.sol/CreditAccountMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "destination",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "ExecuteCall",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TransferCall",
    type: "event",
  },
  {
    inputs: [],
    name: "creditManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "return_executeResult",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "revertsOnTransfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "safeTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_result",
        type: "bytes",
      },
    ],
    name: "setReturnExecuteResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "setRevertOnTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610980806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c12c21c01161005b578063c12c21c014610265578063ce8bf51c146102ae578063d1660f9914610316578063e0d4d10e1461035957600080fd5b80631cff79cd1461008d5780633da7798a146101c557806354fd4d501461024257806382f59c761461025d575b600080fd5b610150600480360360408110156100a357600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156100db57600080fd5b8201836020820111156100ed57600080fd5b8035906020019184600183028401116401000000008311171561010f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103c9945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018a578181015183820152602001610172565b50505050905090810190601f1680156101b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610240600480360360408110156101db57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116600090815260026020908152604080832094820135909316825292909252902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b005b61024b61012c81565b60408051918252519081900360200190f35b610150610515565b6000546102859073ffffffffffffffffffffffffffffffffffffffff1681565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610302600480360360408110156102c457600080fd5b506002602090815273ffffffffffffffffffffffffffffffffffffffff82358116600090815260408082208452929093013516825290205460ff1681565b604080519115158252519081900360200190f35b6102406004803603606081101561032c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356105a3565b6102406004803603602081101561036f57600080fd5b81019060208101813564010000000081111561038a57600080fd5b82018360208201111561039c57600080fd5b803590602001918460018302840111640100000000831117156103be57600080fd5b50909250905061074d565b60607f2505ea5af21fd5bc6d2cf6c89e11505902bf7e33a2f0af2195e429da277909fd8383604051808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561044757818101518382015260200161042f565b50505050905090810190601f1680156104745780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16001805461048f9061075f565b80601f01602080910402602001604051908101604052809291908181526020018280546104bb9061075f565b80156105085780601f106104dd57610100808354040283529160200191610508565b820191906000526020600020905b8154815290600101906020018083116104eb57829003601f168201915b5050505050905092915050565b600180546105229061075f565b80601f016020809104026020016040519081016040528092919081815260200182805461054e9061075f565b801561059b5780601f106105705761010080835404028352916020019161059b565b820191906000526020600020905b81548152906001019060200180831161057e57829003601f168201915b505050505081565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526002602090815260408083209386168352929052205460ff161561064557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f546f6b656e207472616e73666572207265766572746564000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff83163b156106f1578273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506020604051808303816000875af11580156106d8573d6000803e3d6000fd5b505050506040513d60208110156106ee57600080fd5b50505b6040805173ffffffffffffffffffffffffffffffffffffffff80861682528416602082015280820183905290517ffd89bae87c8ae499e0252e334e8ee027b80e445013c3e37800b86e8fd87129f09181900360600190a1505050565b600161075a82848361082f565b505050565b600181811c9082168061077357607f821691505b6020821081036107ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f82111561075a57600081815260208120601f850160051c810160208610156108085750805b601f850160051c820191505b8181101561082757828155600101610814565b505050505050565b67ffffffffffffffff831115610847576108476107b2565b61085b83610855835461075f565b836107e1565b6000601f8411600181146108ad57600085156108775750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610943565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156108fc57868501358255602094850194600190920191016108dc565b5086821015610937577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b505050505056fea2646970667358221220b6687ad2ec5a3b972e1f6abbb3fc400d056c4480694ce7f27fb276f7135bd44d64736f6c63430008110033";

type CreditAccountMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CreditAccountMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CreditAccountMock__factory extends ContractFactory {
  constructor(...args: CreditAccountMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CreditAccountMock";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CreditAccountMock> {
    return super.deploy(overrides || {}) as Promise<CreditAccountMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CreditAccountMock {
    return super.attach(address) as CreditAccountMock;
  }
  override connect(signer: Signer): CreditAccountMock__factory {
    return super.connect(signer) as CreditAccountMock__factory;
  }
  static readonly contractName: "CreditAccountMock";

  public readonly contractName: "CreditAccountMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CreditAccountMockInterface {
    return new utils.Interface(_abi) as CreditAccountMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CreditAccountMock {
    return new Contract(address, _abi, signerOrProvider) as CreditAccountMock;
  }
}
