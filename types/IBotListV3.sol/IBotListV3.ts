/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IBotListV3Interface extends utils.Interface {
  functions: {
    "approvedCreditManager(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "botFunding(address,address,address)": FunctionFragment;
    "botPermissions(address,address,address)": FunctionFragment;
    "botSpecialStatus(address,address)": FunctionFragment;
    "daoFee()": FunctionFragment;
    "deposit()": FunctionFragment;
    "eraseAllBotPermissions(address,address)": FunctionFragment;
    "getActiveBots(address,address)": FunctionFragment;
    "getBotStatus(address,address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "payBot(address,address,address,address,uint72)": FunctionFragment;
    "setApprovedCreditManagerStatus(address,bool)": FunctionFragment;
    "setBotForbiddenStatus(address,address,bool)": FunctionFragment;
    "setBotForbiddenStatusEverywhere(address,bool)": FunctionFragment;
    "setBotPermissions(address,address,address,uint192,uint72,uint72)": FunctionFragment;
    "setBotSpecialPermissions(address,address,uint192)": FunctionFragment;
    "setDAOFee(uint16)": FunctionFragment;
    "symbol()": FunctionFragment;
    "treasury()": FunctionFragment;
    "version()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approvedCreditManager"
      | "balanceOf"
      | "botFunding"
      | "botPermissions"
      | "botSpecialStatus"
      | "daoFee"
      | "deposit"
      | "eraseAllBotPermissions"
      | "getActiveBots"
      | "getBotStatus"
      | "name"
      | "payBot"
      | "setApprovedCreditManagerStatus"
      | "setBotForbiddenStatus"
      | "setBotForbiddenStatusEverywhere"
      | "setBotPermissions"
      | "setBotSpecialPermissions"
      | "setDAOFee"
      | "symbol"
      | "treasury"
      | "version"
      | "weth"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approvedCreditManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "botFunding",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "botPermissions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "botSpecialStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "daoFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eraseAllBotPermissions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveBots",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBotStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payBot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedCreditManagerStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotForbiddenStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotForbiddenStatusEverywhere",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotPermissions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotSpecialPermissions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDAOFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedCreditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "botFunding", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "botPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "botSpecialStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eraseAllBotPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveBots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBotStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payBot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedCreditManagerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotForbiddenStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotForbiddenStatusEverywhere",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotSpecialPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDAOFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "EraseBot(address,address,address)": EventFragment;
    "PayBot(address,address,address,uint72,uint72)": EventFragment;
    "SetBotDAOFee(uint16)": EventFragment;
    "SetBotForbiddenStatus(address,address,bool)": EventFragment;
    "SetBotPermissions(address,address,address,uint256,uint72,uint72)": EventFragment;
    "SetBotSpecialPermissions(address,address,uint192)": EventFragment;
    "SetCreditManagerStatus(address,bool)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EraseBot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayBot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotDAOFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotForbiddenStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotPermissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotSpecialPermissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCreditManagerStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  payer: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EraseBotEventObject {
  creditManager: string;
  creditAccount: string;
  bot: string;
}
export type EraseBotEvent = TypedEvent<
  [string, string, string],
  EraseBotEventObject
>;

export type EraseBotEventFilter = TypedEventFilter<EraseBotEvent>;

export interface PayBotEventObject {
  payer: string;
  creditAccount: string;
  bot: string;
  paymentAmount: BigNumber;
  daoFeeAmount: BigNumber;
}
export type PayBotEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  PayBotEventObject
>;

export type PayBotEventFilter = TypedEventFilter<PayBotEvent>;

export interface SetBotDAOFeeEventObject {
  newFee: number;
}
export type SetBotDAOFeeEvent = TypedEvent<[number], SetBotDAOFeeEventObject>;

export type SetBotDAOFeeEventFilter = TypedEventFilter<SetBotDAOFeeEvent>;

export interface SetBotForbiddenStatusEventObject {
  creditManager: string;
  bot: string;
  status: boolean;
}
export type SetBotForbiddenStatusEvent = TypedEvent<
  [string, string, boolean],
  SetBotForbiddenStatusEventObject
>;

export type SetBotForbiddenStatusEventFilter =
  TypedEventFilter<SetBotForbiddenStatusEvent>;

export interface SetBotPermissionsEventObject {
  creditManager: string;
  creditAccount: string;
  bot: string;
  permissions: BigNumber;
  fundingAmount: BigNumber;
  weeklyFundingAllowance: BigNumber;
}
export type SetBotPermissionsEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  SetBotPermissionsEventObject
>;

export type SetBotPermissionsEventFilter =
  TypedEventFilter<SetBotPermissionsEvent>;

export interface SetBotSpecialPermissionsEventObject {
  creditManager: string;
  bot: string;
  permissions: BigNumber;
}
export type SetBotSpecialPermissionsEvent = TypedEvent<
  [string, string, BigNumber],
  SetBotSpecialPermissionsEventObject
>;

export type SetBotSpecialPermissionsEventFilter =
  TypedEventFilter<SetBotSpecialPermissionsEvent>;

export interface SetCreditManagerStatusEventObject {
  creditManager: string;
  newStatus: boolean;
}
export type SetCreditManagerStatusEvent = TypedEvent<
  [string, boolean],
  SetCreditManagerStatusEventObject
>;

export type SetCreditManagerStatusEventFilter =
  TypedEventFilter<SetCreditManagerStatusEvent>;

export interface WithdrawEventObject {
  payer: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IBotListV3 extends BaseContract {
  contractName: "IBotListV3";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBotListV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approvedCreditManager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(
      payer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    botFunding(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        remainingFunds: BigNumber;
        maxWeeklyAllowance: BigNumber;
        remainingWeeklyAllowance: BigNumber;
        allowanceLU: number;
      }
    >;

    botPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    botSpecialStatus(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        forbidden: boolean;
        specialPermissions: BigNumber;
      }
    >;

    daoFee(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eraseAllBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveBots(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBotStatus(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        permissions: BigNumber;
        forbidden: boolean;
        hasSpecialPermissions: boolean;
      }
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    payBot(
      payer: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovedCreditManagerStatus(
      creditManager: PromiseOrValue<string>,
      newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBotForbiddenStatus(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBotForbiddenStatusEverywhere(
      bot: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      fundingAmount: PromiseOrValue<BigNumberish>,
      weeklyFundingAllowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBotSpecialPermissions(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDAOFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approvedCreditManager(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(
    payer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  botFunding(
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    bot: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number] & {
      remainingFunds: BigNumber;
      maxWeeklyAllowance: BigNumber;
      remainingWeeklyAllowance: BigNumber;
      allowanceLU: number;
    }
  >;

  botPermissions(
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    bot: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  botSpecialStatus(
    creditManager: PromiseOrValue<string>,
    bot: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { forbidden: boolean; specialPermissions: BigNumber }
  >;

  daoFee(overrides?: CallOverrides): Promise<number>;

  deposit(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eraseAllBotPermissions(
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveBots(
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBotStatus(
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    bot: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, boolean] & {
      permissions: BigNumber;
      forbidden: boolean;
      hasSpecialPermissions: boolean;
    }
  >;

  name(overrides?: CallOverrides): Promise<string>;

  payBot(
    payer: PromiseOrValue<string>,
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    bot: PromiseOrValue<string>,
    paymentAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovedCreditManagerStatus(
    creditManager: PromiseOrValue<string>,
    newStatus: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBotForbiddenStatus(
    creditManager: PromiseOrValue<string>,
    bot: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBotForbiddenStatusEverywhere(
    bot: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBotPermissions(
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    bot: PromiseOrValue<string>,
    permissions: PromiseOrValue<BigNumberish>,
    fundingAmount: PromiseOrValue<BigNumberish>,
    weeklyFundingAllowance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBotSpecialPermissions(
    creditManager: PromiseOrValue<string>,
    bot: PromiseOrValue<string>,
    permissions: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDAOFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approvedCreditManager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      payer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    botFunding(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        remainingFunds: BigNumber;
        maxWeeklyAllowance: BigNumber;
        remainingWeeklyAllowance: BigNumber;
        allowanceLU: number;
      }
    >;

    botPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    botSpecialStatus(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        forbidden: boolean;
        specialPermissions: BigNumber;
      }
    >;

    daoFee(overrides?: CallOverrides): Promise<number>;

    deposit(overrides?: CallOverrides): Promise<void>;

    eraseAllBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveBots(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBotStatus(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        permissions: BigNumber;
        forbidden: boolean;
        hasSpecialPermissions: boolean;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    payBot(
      payer: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovedCreditManagerStatus(
      creditManager: PromiseOrValue<string>,
      newStatus: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBotForbiddenStatus(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBotForbiddenStatusEverywhere(
      bot: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      fundingAmount: PromiseOrValue<BigNumberish>,
      weeklyFundingAllowance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBotSpecialPermissions(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDAOFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256)"(
      payer?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      payer?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;

    "EraseBot(address,address,address)"(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null
    ): EraseBotEventFilter;
    EraseBot(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null
    ): EraseBotEventFilter;

    "PayBot(address,address,address,uint72,uint72)"(
      payer?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      paymentAmount?: null,
      daoFeeAmount?: null
    ): PayBotEventFilter;
    PayBot(
      payer?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      paymentAmount?: null,
      daoFeeAmount?: null
    ): PayBotEventFilter;

    "SetBotDAOFee(uint16)"(newFee?: null): SetBotDAOFeeEventFilter;
    SetBotDAOFee(newFee?: null): SetBotDAOFeeEventFilter;

    "SetBotForbiddenStatus(address,address,bool)"(
      creditManager?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      status?: null
    ): SetBotForbiddenStatusEventFilter;
    SetBotForbiddenStatus(
      creditManager?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      status?: null
    ): SetBotForbiddenStatusEventFilter;

    "SetBotPermissions(address,address,address,uint256,uint72,uint72)"(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      permissions?: null,
      fundingAmount?: null,
      weeklyFundingAllowance?: null
    ): SetBotPermissionsEventFilter;
    SetBotPermissions(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      permissions?: null,
      fundingAmount?: null,
      weeklyFundingAllowance?: null
    ): SetBotPermissionsEventFilter;

    "SetBotSpecialPermissions(address,address,uint192)"(
      creditManager?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotSpecialPermissionsEventFilter;
    SetBotSpecialPermissions(
      creditManager?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotSpecialPermissionsEventFilter;

    "SetCreditManagerStatus(address,bool)"(
      creditManager?: PromiseOrValue<string> | null,
      newStatus?: null
    ): SetCreditManagerStatusEventFilter;
    SetCreditManagerStatus(
      creditManager?: PromiseOrValue<string> | null,
      newStatus?: null
    ): SetCreditManagerStatusEventFilter;

    "Withdraw(address,uint256)"(
      payer?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      payer?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    approvedCreditManager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      payer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    botFunding(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    botPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    botSpecialStatus(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoFee(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eraseAllBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveBots(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBotStatus(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    payBot(
      payer: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovedCreditManagerStatus(
      creditManager: PromiseOrValue<string>,
      newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBotForbiddenStatus(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBotForbiddenStatusEverywhere(
      bot: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      fundingAmount: PromiseOrValue<BigNumberish>,
      weeklyFundingAllowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBotSpecialPermissions(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDAOFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvedCreditManager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      payer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    botFunding(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    botPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    botSpecialStatus(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daoFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eraseAllBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveBots(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBotStatus(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payBot(
      payer: PromiseOrValue<string>,
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      paymentAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovedCreditManagerStatus(
      creditManager: PromiseOrValue<string>,
      newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBotForbiddenStatus(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBotForbiddenStatusEverywhere(
      bot: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBotPermissions(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      fundingAmount: PromiseOrValue<BigNumberish>,
      weeklyFundingAllowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBotSpecialPermissions(
      creditManager: PromiseOrValue<string>,
      bot: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDAOFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
