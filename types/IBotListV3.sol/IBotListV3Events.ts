/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IBotListV3EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Deposit(address,uint256)": EventFragment;
    "EraseBot(address,address,address)": EventFragment;
    "PayBot(address,address,address,uint72,uint72)": EventFragment;
    "SetBotDAOFee(uint16)": EventFragment;
    "SetBotForbiddenStatus(address,address,bool)": EventFragment;
    "SetBotPermissions(address,address,address,uint256,uint72,uint72)": EventFragment;
    "SetBotSpecialPermissions(address,address,uint192)": EventFragment;
    "SetCreditManagerStatus(address,bool)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EraseBot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayBot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotDAOFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotForbiddenStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotPermissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBotSpecialPermissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCreditManagerStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  payer: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EraseBotEventObject {
  creditManager: string;
  creditAccount: string;
  bot: string;
}
export type EraseBotEvent = TypedEvent<
  [string, string, string],
  EraseBotEventObject
>;

export type EraseBotEventFilter = TypedEventFilter<EraseBotEvent>;

export interface PayBotEventObject {
  payer: string;
  creditAccount: string;
  bot: string;
  paymentAmount: BigNumber;
  daoFeeAmount: BigNumber;
}
export type PayBotEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  PayBotEventObject
>;

export type PayBotEventFilter = TypedEventFilter<PayBotEvent>;

export interface SetBotDAOFeeEventObject {
  newFee: number;
}
export type SetBotDAOFeeEvent = TypedEvent<[number], SetBotDAOFeeEventObject>;

export type SetBotDAOFeeEventFilter = TypedEventFilter<SetBotDAOFeeEvent>;

export interface SetBotForbiddenStatusEventObject {
  creditManager: string;
  bot: string;
  status: boolean;
}
export type SetBotForbiddenStatusEvent = TypedEvent<
  [string, string, boolean],
  SetBotForbiddenStatusEventObject
>;

export type SetBotForbiddenStatusEventFilter =
  TypedEventFilter<SetBotForbiddenStatusEvent>;

export interface SetBotPermissionsEventObject {
  creditManager: string;
  creditAccount: string;
  bot: string;
  permissions: BigNumber;
  fundingAmount: BigNumber;
  weeklyFundingAllowance: BigNumber;
}
export type SetBotPermissionsEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  SetBotPermissionsEventObject
>;

export type SetBotPermissionsEventFilter =
  TypedEventFilter<SetBotPermissionsEvent>;

export interface SetBotSpecialPermissionsEventObject {
  creditManager: string;
  bot: string;
  permissions: BigNumber;
}
export type SetBotSpecialPermissionsEvent = TypedEvent<
  [string, string, BigNumber],
  SetBotSpecialPermissionsEventObject
>;

export type SetBotSpecialPermissionsEventFilter =
  TypedEventFilter<SetBotSpecialPermissionsEvent>;

export interface SetCreditManagerStatusEventObject {
  creditManager: string;
  newStatus: boolean;
}
export type SetCreditManagerStatusEvent = TypedEvent<
  [string, boolean],
  SetCreditManagerStatusEventObject
>;

export type SetCreditManagerStatusEventFilter =
  TypedEventFilter<SetCreditManagerStatusEvent>;

export interface WithdrawEventObject {
  payer: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IBotListV3Events extends BaseContract {
  contractName: "IBotListV3Events";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBotListV3EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Deposit(address,uint256)"(
      payer?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      payer?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;

    "EraseBot(address,address,address)"(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null
    ): EraseBotEventFilter;
    EraseBot(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null
    ): EraseBotEventFilter;

    "PayBot(address,address,address,uint72,uint72)"(
      payer?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      paymentAmount?: null,
      daoFeeAmount?: null
    ): PayBotEventFilter;
    PayBot(
      payer?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      paymentAmount?: null,
      daoFeeAmount?: null
    ): PayBotEventFilter;

    "SetBotDAOFee(uint16)"(newFee?: null): SetBotDAOFeeEventFilter;
    SetBotDAOFee(newFee?: null): SetBotDAOFeeEventFilter;

    "SetBotForbiddenStatus(address,address,bool)"(
      creditManager?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      status?: null
    ): SetBotForbiddenStatusEventFilter;
    SetBotForbiddenStatus(
      creditManager?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      status?: null
    ): SetBotForbiddenStatusEventFilter;

    "SetBotPermissions(address,address,address,uint256,uint72,uint72)"(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      permissions?: null,
      fundingAmount?: null,
      weeklyFundingAllowance?: null
    ): SetBotPermissionsEventFilter;
    SetBotPermissions(
      creditManager?: PromiseOrValue<string> | null,
      creditAccount?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      permissions?: null,
      fundingAmount?: null,
      weeklyFundingAllowance?: null
    ): SetBotPermissionsEventFilter;

    "SetBotSpecialPermissions(address,address,uint192)"(
      creditManager?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotSpecialPermissionsEventFilter;
    SetBotSpecialPermissions(
      creditManager?: PromiseOrValue<string> | null,
      bot?: PromiseOrValue<string> | null,
      permissions?: null
    ): SetBotSpecialPermissionsEventFilter;

    "SetCreditManagerStatus(address,bool)"(
      creditManager?: PromiseOrValue<string> | null,
      newStatus?: null
    ): SetCreditManagerStatusEventFilter;
    SetCreditManagerStatus(
      creditManager?: PromiseOrValue<string> | null,
      newStatus?: null
    ): SetCreditManagerStatusEventFilter;

    "Withdraw(address,uint256)"(
      payer?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      payer?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
