/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IAccountFactoryEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AccountMinerChanged(address)": EventFragment;
    "InitializeCreditAccount(address,address)": EventFragment;
    "NewCreditAccount(address)": EventFragment;
    "ReturnCreditAccount(address)": EventFragment;
    "TakeForever(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountMinerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitializeCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReturnCreditAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeForever"): EventFragment;
}

export interface AccountMinerChangedEventObject {
  miner: string;
}
export type AccountMinerChangedEvent = TypedEvent<
  [string],
  AccountMinerChangedEventObject
>;

export type AccountMinerChangedEventFilter =
  TypedEventFilter<AccountMinerChangedEvent>;

export interface InitializeCreditAccountEventObject {
  account: string;
  creditManager: string;
}
export type InitializeCreditAccountEvent = TypedEvent<
  [string, string],
  InitializeCreditAccountEventObject
>;

export type InitializeCreditAccountEventFilter =
  TypedEventFilter<InitializeCreditAccountEvent>;

export interface NewCreditAccountEventObject {
  account: string;
}
export type NewCreditAccountEvent = TypedEvent<
  [string],
  NewCreditAccountEventObject
>;

export type NewCreditAccountEventFilter =
  TypedEventFilter<NewCreditAccountEvent>;

export interface ReturnCreditAccountEventObject {
  account: string;
}
export type ReturnCreditAccountEvent = TypedEvent<
  [string],
  ReturnCreditAccountEventObject
>;

export type ReturnCreditAccountEventFilter =
  TypedEventFilter<ReturnCreditAccountEvent>;

export interface TakeForeverEventObject {
  creditAccount: string;
  to: string;
}
export type TakeForeverEvent = TypedEvent<
  [string, string],
  TakeForeverEventObject
>;

export type TakeForeverEventFilter = TypedEventFilter<TakeForeverEvent>;

export interface IAccountFactoryEvents extends BaseContract {
  contractName: "IAccountFactoryEvents";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAccountFactoryEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AccountMinerChanged(address)"(
      miner?: PromiseOrValue<string> | null
    ): AccountMinerChangedEventFilter;
    AccountMinerChanged(
      miner?: PromiseOrValue<string> | null
    ): AccountMinerChangedEventFilter;

    "InitializeCreditAccount(address,address)"(
      account?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null
    ): InitializeCreditAccountEventFilter;
    InitializeCreditAccount(
      account?: PromiseOrValue<string> | null,
      creditManager?: PromiseOrValue<string> | null
    ): InitializeCreditAccountEventFilter;

    "NewCreditAccount(address)"(
      account?: PromiseOrValue<string> | null
    ): NewCreditAccountEventFilter;
    NewCreditAccount(
      account?: PromiseOrValue<string> | null
    ): NewCreditAccountEventFilter;

    "ReturnCreditAccount(address)"(
      account?: PromiseOrValue<string> | null
    ): ReturnCreditAccountEventFilter;
    ReturnCreditAccount(
      account?: PromiseOrValue<string> | null
    ): ReturnCreditAccountEventFilter;

    "TakeForever(address,address)"(
      creditAccount?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): TakeForeverEventFilter;
    TakeForever(
      creditAccount?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): TakeForeverEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
