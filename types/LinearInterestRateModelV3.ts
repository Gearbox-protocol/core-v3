/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface LinearInterestRateModelV3Interface extends utils.Interface {
  functions: {
    "R_base_RAY()": FunctionFragment;
    "R_slope1_RAY()": FunctionFragment;
    "R_slope2_RAY()": FunctionFragment;
    "R_slope3_RAY()": FunctionFragment;
    "U_1_WAD()": FunctionFragment;
    "U_2_WAD()": FunctionFragment;
    "availableToBorrow(uint256,uint256)": FunctionFragment;
    "calcBorrowRate(uint256,uint256,bool)": FunctionFragment;
    "calcBorrowRate(uint256,uint256)": FunctionFragment;
    "getModelParameters()": FunctionFragment;
    "isBorrowingMoreU2Forbidden()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "R_base_RAY"
      | "R_slope1_RAY"
      | "R_slope2_RAY"
      | "R_slope3_RAY"
      | "U_1_WAD"
      | "U_2_WAD"
      | "availableToBorrow"
      | "calcBorrowRate(uint256,uint256,bool)"
      | "calcBorrowRate(uint256,uint256)"
      | "getModelParameters"
      | "isBorrowingMoreU2Forbidden"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "R_base_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "R_slope1_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "R_slope2_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "R_slope3_RAY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "U_1_WAD", values?: undefined): string;
  encodeFunctionData(functionFragment: "U_2_WAD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "availableToBorrow",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBorrowRate(uint256,uint256,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBorrowRate(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getModelParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBorrowingMoreU2Forbidden",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "R_base_RAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "R_slope1_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "R_slope2_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "R_slope3_RAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "U_1_WAD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "U_2_WAD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableToBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBorrowRate(uint256,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBorrowRate(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModelParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowingMoreU2Forbidden",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface LinearInterestRateModelV3 extends BaseContract {
  contractName: "LinearInterestRateModelV3";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LinearInterestRateModelV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    R_base_RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    R_slope1_RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    R_slope2_RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    R_slope3_RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    U_1_WAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    U_2_WAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    availableToBorrow(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcBorrowRate(uint256,uint256,bool)"(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      checkOptimalBorrowing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcBorrowRate(uint256,uint256)"(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getModelParameters(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, number] & {
        U_1: number;
        U_2: number;
        R_base: number;
        R_slope1: number;
        R_slope2: number;
        R_slope3: number;
      }
    >;

    isBorrowingMoreU2Forbidden(overrides?: CallOverrides): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  R_base_RAY(overrides?: CallOverrides): Promise<BigNumber>;

  R_slope1_RAY(overrides?: CallOverrides): Promise<BigNumber>;

  R_slope2_RAY(overrides?: CallOverrides): Promise<BigNumber>;

  R_slope3_RAY(overrides?: CallOverrides): Promise<BigNumber>;

  U_1_WAD(overrides?: CallOverrides): Promise<BigNumber>;

  U_2_WAD(overrides?: CallOverrides): Promise<BigNumber>;

  availableToBorrow(
    expectedLiquidity: PromiseOrValue<BigNumberish>,
    availableLiquidity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcBorrowRate(uint256,uint256,bool)"(
    expectedLiquidity: PromiseOrValue<BigNumberish>,
    availableLiquidity: PromiseOrValue<BigNumberish>,
    checkOptimalBorrowing: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcBorrowRate(uint256,uint256)"(
    expectedLiquidity: PromiseOrValue<BigNumberish>,
    availableLiquidity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getModelParameters(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, number] & {
      U_1: number;
      U_2: number;
      R_base: number;
      R_slope1: number;
      R_slope2: number;
      R_slope3: number;
    }
  >;

  isBorrowingMoreU2Forbidden(overrides?: CallOverrides): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    R_base_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    R_slope1_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    R_slope2_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    R_slope3_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    U_1_WAD(overrides?: CallOverrides): Promise<BigNumber>;

    U_2_WAD(overrides?: CallOverrides): Promise<BigNumber>;

    availableToBorrow(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBorrowRate(uint256,uint256,bool)"(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      checkOptimalBorrowing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBorrowRate(uint256,uint256)"(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModelParameters(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, number] & {
        U_1: number;
        U_2: number;
        R_base: number;
        R_slope1: number;
        R_slope2: number;
        R_slope3: number;
      }
    >;

    isBorrowingMoreU2Forbidden(overrides?: CallOverrides): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    R_base_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    R_slope1_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    R_slope2_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    R_slope3_RAY(overrides?: CallOverrides): Promise<BigNumber>;

    U_1_WAD(overrides?: CallOverrides): Promise<BigNumber>;

    U_2_WAD(overrides?: CallOverrides): Promise<BigNumber>;

    availableToBorrow(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBorrowRate(uint256,uint256,bool)"(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      checkOptimalBorrowing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBorrowRate(uint256,uint256)"(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModelParameters(overrides?: CallOverrides): Promise<BigNumber>;

    isBorrowingMoreU2Forbidden(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    R_base_RAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    R_slope1_RAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    R_slope2_RAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    R_slope3_RAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    U_1_WAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    U_2_WAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableToBorrow(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcBorrowRate(uint256,uint256,bool)"(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      checkOptimalBorrowing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcBorrowRate(uint256,uint256)"(
      expectedLiquidity: PromiseOrValue<BigNumberish>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getModelParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBorrowingMoreU2Forbidden(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
